
Uzaktan_Yazilim_Guncelleme_Uygulamasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004610  08004610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7e4  2000000c  08004624  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d7f0  08004624  0002d7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbaa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002357  00000000  00000000  0002fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00031f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002192f  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae69  00000000  00000000  00055257  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9f0f  00000000  00000000  000600c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  0012a04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004584 	.word	0x08004584

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004584 	.word	0x08004584

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <RX_Callback>:
#include "main.h"

ESP_datas_t ESP_datas = {0};

void RX_Callback()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	static uint32_t linenumber = 0;

	uint32_t* p_last_line_of_Received_Data;

	get_data_from_wifi_module(&huart2,p_last_line_of_Received_Data,linenumber);  //pointer yap
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <RX_Callback+0x24>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <RX_Callback+0x28>)
 80004da:	f000 f80b 	bl	80004f4 <get_data_from_wifi_module>

	check_message_type(p_last_line_of_Received_Data);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f83c 	bl	800055c <check_message_type>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000d728 	.word	0x2000d728
 80004f0:	2000d78c 	.word	0x2000d78c

080004f4 <get_data_from_wifi_module>:
/********************************************************************************************************************************
 * Receiving data one byte one byte over server and put inside Received_Data
 * Received_data can be used as terminal?
 ********************************************************************************************************************************/
void get_data_from_wifi_module(UART_HandleTypeDef *huartx,uint32_t* p_last_line_of_Received_Data,uint8_t linenumber_u32)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	4613      	mov	r3, r2
 8000500:	71fb      	strb	r3, [r7, #7]
	uint8_t  rx_data;

	HAL_UART_Receive_IT(huartx, &rx_data, 1);
 8000502:	f107 0317 	add.w	r3, r7, #23
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f003 f946 	bl	800379c <HAL_UART_Receive_IT>

	ESP_datas.Received_Data[linenumber_u32][ESP_datas.rx_index] = rx_data;
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <get_data_from_wifi_module+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	7dfc      	ldrb	r4, [r7, #23]
 8000518:	490e      	ldr	r1, [pc, #56]	; (8000554 <get_data_from_wifi_module+0x60>)
 800051a:	20c8      	movs	r0, #200	; 0xc8
 800051c:	fb00 f202 	mul.w	r2, r0, r2
 8000520:	440a      	add	r2, r1
 8000522:	4413      	add	r3, r2
 8000524:	3308      	adds	r3, #8
 8000526:	4622      	mov	r2, r4
 8000528:	701a      	strb	r2, [r3, #0]

	ESP_datas.last_line_of_Received_Data[ESP_datas.rx_index] = rx_data;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <get_data_from_wifi_module+0x60>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	7df9      	ldrb	r1, [r7, #23]
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <get_data_from_wifi_module+0x60>)
 8000532:	4413      	add	r3, r2
 8000534:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000538:	3348      	adds	r3, #72	; 0x48
 800053a:	460a      	mov	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]

	ESP_datas.rx_index++;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <get_data_from_wifi_module+0x60>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	3301      	adds	r3, #1
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <get_data_from_wifi_module+0x60>)
 8000546:	6053      	str	r3, [r2, #4]

	p_last_line_of_Received_Data = ((uint32_t*)&ESP_datas.last_line_of_Received_Data);
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <get_data_from_wifi_module+0x64>)
 800054a:	60bb      	str	r3, [r7, #8]
}
 800054c:	bf00      	nop
 800054e:	371c      	adds	r7, #28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	20000028 	.word	0x20000028
 8000558:	20009c70 	.word	0x20009c70

0800055c <check_message_type>:
 *
 *     -2-      | + IPD:..... |       -1-        | + IPD:                     -1-        |      -0-
 *   START BITS | X BYTE DATA | PACKET_STOP_BITS | X BYTE DATA - .... - PACKET_STOP_BITS | LAST_STOP_BITS
 ********************************************************************************************************************************/
void check_message_type(const uint32_t* const p_last_line_of_Received_Data) //todo const ekle .asagida verilere pointer ile ulas
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	static uint32_t scan_index_u32    = 0;
	static uint8_t  veri_akisi_u8     = 0;
	static uint8_t  stop_bit_type_u8  = 0;
	static uint8_t  response_u8       = 0;

	check_first_response(response_u8);
 8000564:	4bb4      	ldr	r3, [pc, #720]	; (8000838 <check_message_type+0x2dc>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fb93 	bl	8000c94 <check_first_response>

	if (IPD == response_u8)   //GELEN VERİLER IPD Lİ Son_Satir_Receive_Data[0]
 800056e:	4bb2      	ldr	r3, [pc, #712]	; (8000838 <check_message_type+0x2dc>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 8188 	bne.w	8000888 <check_message_type+0x32c>
	{
		check_start_and_stop_bits(veri_akisi_u8,scan_index_u32);
 8000578:	4bb0      	ldr	r3, [pc, #704]	; (800083c <check_message_type+0x2e0>)
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	4bb0      	ldr	r3, [pc, #704]	; (8000840 <check_message_type+0x2e4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	4610      	mov	r0, r2
 8000584:	f000 faa8 	bl	8000ad8 <check_start_and_stop_bits>

	    if(ON == veri_akisi_u8)   //ALINAN PAKET
 8000588:	4bac      	ldr	r3, [pc, #688]	; (800083c <check_message_type+0x2e0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	f040 8091 	bne.w	80006b4 <check_message_type+0x158>
	    {
	    	for (int i = ESP_datas.Start_byte_index; i < ESP_datas.Stop_byte_index ; i++)
 8000592:	4bac      	ldr	r3, [pc, #688]	; (8000844 <check_message_type+0x2e8>)
 8000594:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000598:	33e4      	adds	r3, #228	; 0xe4
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e04d      	b.n	800063c <check_message_type+0xe0>
	    	{
	    		check_stop_bits(stop_bit_type_u8);
 80005a0:	4ba9      	ldr	r3, [pc, #676]	; (8000848 <check_message_type+0x2ec>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fb11 	bl	8000bcc <check_stop_bits>

	    		ESP_datas.new_firmware_datas[ESP_datas.SGTD_index] = ESP_datas.last_line_of_Received_Data[i];
 80005aa:	4ba6      	ldr	r3, [pc, #664]	; (8000844 <check_message_type+0x2e8>)
 80005ac:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80005b0:	33ec      	adds	r3, #236	; 0xec
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	49a3      	ldr	r1, [pc, #652]	; (8000844 <check_message_type+0x2e8>)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	440b      	add	r3, r1
 80005ba:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80005be:	3348      	adds	r3, #72	; 0x48
 80005c0:	7819      	ldrb	r1, [r3, #0]
 80005c2:	4ba0      	ldr	r3, [pc, #640]	; (8000844 <check_message_type+0x2e8>)
 80005c4:	4413      	add	r3, r2
 80005c6:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 80005ca:	3311      	adds	r3, #17
 80005cc:	460a      	mov	r2, r1
 80005ce:	701a      	strb	r2, [r3, #0]

	    		if(LAST_STOP_BITS == stop_bit_type_u8) //SON pakette geldi
 80005d0:	4b9d      	ldr	r3, [pc, #628]	; (8000848 <check_message_type+0x2ec>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10f      	bne.n	80005f8 <check_message_type+0x9c>
	    		{
	    			ESP_datas.all_firmware_have_received = OFF;
 80005d8:	4b9a      	ldr	r3, [pc, #616]	; (8000844 <check_message_type+0x2e8>)
 80005da:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80005de:	33f0      	adds	r3, #240	; 0xf0
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]

	    			ESP_datas.arastop = 0;
 80005e4:	4b97      	ldr	r3, [pc, #604]	; (8000844 <check_message_type+0x2e8>)
 80005e6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80005ea:	33e8      	adds	r3, #232	; 0xe8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]

	    			FOTA.State_of_FOTA = ON;    //Buradaki işlemler bitti main e geç:::Verileri_duzenleme_ aşaması
 80005f0:	4b96      	ldr	r3, [pc, #600]	; (800084c <check_message_type+0x2f0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]

	    			break;
 80005f6:	e02a      	b.n	800064e <check_message_type+0xf2>
	    		}
	    		else if(PACKET_STOP_BITS == stop_bit_type_u8)//SGTD'yı dolduracak kadar byte geldi(1paket)
 80005f8:	4b93      	ldr	r3, [pc, #588]	; (8000848 <check_message_type+0x2ec>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10f      	bne.n	8000620 <check_message_type+0xc4>
	    		{
	    		 	ESP_datas.all_firmware_have_received = ON;
 8000600:	4b90      	ldr	r3, [pc, #576]	; (8000844 <check_message_type+0x2e8>)
 8000602:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000606:	33f0      	adds	r3, #240	; 0xf0
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]

	    		 	ESP_datas.arastop = 3;  //ham paketi stop_byte ve start_byte'dan ayırırız ancak arastop_paket kalır
 800060c:	4b8d      	ldr	r3, [pc, #564]	; (8000844 <check_message_type+0x2e8>)
 800060e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000612:	33e8      	adds	r3, #232	; 0xe8
 8000614:	2203      	movs	r2, #3
 8000616:	601a      	str	r2, [r3, #0]

	    		 	FOTA.State_of_FOTA = ON;   //Buradaki işlemler bitti main e geç:::Verileri_duzenleme_ aşaması
 8000618:	4b8c      	ldr	r3, [pc, #560]	; (800084c <check_message_type+0x2f0>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]

	    		 	break;
 800061e:	e016      	b.n	800064e <check_message_type+0xf2>
	    		}

	    		ESP_datas.SGTD_index++;
 8000620:	4b88      	ldr	r3, [pc, #544]	; (8000844 <check_message_type+0x2e8>)
 8000622:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000626:	33ec      	adds	r3, #236	; 0xec
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	4b85      	ldr	r3, [pc, #532]	; (8000844 <check_message_type+0x2e8>)
 800062e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000632:	33ec      	adds	r3, #236	; 0xec
 8000634:	601a      	str	r2, [r3, #0]
	    	for (int i = ESP_datas.Start_byte_index; i < ESP_datas.Stop_byte_index ; i++)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	4b81      	ldr	r3, [pc, #516]	; (8000844 <check_message_type+0x2e8>)
 800063e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000642:	33e5      	adds	r3, #229	; 0xe5
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	4293      	cmp	r3, r2
 800064c:	dba8      	blt.n	80005a0 <check_message_type+0x44>

            }//for (i = ESP_datas.Start_byte_index; i < ESP_datas.Stop_byte_index ; i++)

	    	if (FOTA.State_of_FOTA != ON)
 800064e:	4b7f      	ldr	r3, [pc, #508]	; (800084c <check_message_type+0x2f0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d01c      	beq.n	8000690 <check_message_type+0x134>
	    	{
	    		ESP_datas.requestment_type_u8 = NEW_FIRMWARE_REQUEST;
 8000656:	4b7b      	ldr	r3, [pc, #492]	; (8000844 <check_message_type+0x2e8>)
 8000658:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800065c:	33f1      	adds	r3, #241	; 0xf1
 800065e:	2202      	movs	r2, #2
 8000660:	701a      	strb	r2, [r3, #0]

	    		memset(ESP_datas.Received_Data, 0, sizeof(ESP_datas.Received_Data));
 8000662:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000666:	2100      	movs	r1, #0
 8000668:	4879      	ldr	r0, [pc, #484]	; (8000850 <check_message_type+0x2f4>)
 800066a:	f003 ff83 	bl	8004574 <memset>

	    		memset(ESP_datas.last_line_of_Received_Data, 0,sizeof(ESP_datas.last_line_of_Received_Data));
 800066e:	22c8      	movs	r2, #200	; 0xc8
 8000670:	2100      	movs	r1, #0
 8000672:	4878      	ldr	r0, [pc, #480]	; (8000854 <check_message_type+0x2f8>)
 8000674:	f003 ff7e 	bl	8004574 <memset>

	    		HAL_UART_Transmit(&huart2,(uint8_t*) "AT+CIPSEND=3\r\n",strlen("AT+CIPSEND=3\r\n"), 100);
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	220e      	movs	r2, #14
 800067c:	4976      	ldr	r1, [pc, #472]	; (8000858 <check_message_type+0x2fc>)
 800067e:	4877      	ldr	r0, [pc, #476]	; (800085c <check_message_type+0x300>)
 8000680:	f002 fff3 	bl	800366a <HAL_UART_Transmit>

	    	    ESP_datas.connection_status_with_server = ON;
 8000684:	4b6f      	ldr	r3, [pc, #444]	; (8000844 <check_message_type+0x2e8>)
 8000686:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800068a:	33f2      	adds	r3, #242	; 0xf2
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
	    	}

	    	ESP_datas.Start_byte_index = 0;
 8000690:	4b6c      	ldr	r3, [pc, #432]	; (8000844 <check_message_type+0x2e8>)
 8000692:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000696:	33e4      	adds	r3, #228	; 0xe4
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]

	    	ESP_datas.Stop_byte_index = 0;
 800069c:	4b69      	ldr	r3, [pc, #420]	; (8000844 <check_message_type+0x2e8>)
 800069e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80006a2:	33e5      	adds	r3, #229	; 0xe5
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]

	    	scan_index_u32 = 0;
 80006a8:	4b65      	ldr	r3, [pc, #404]	; (8000840 <check_message_type+0x2e4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]

	    	veri_akisi_u8 = OFF;
 80006ae:	4b63      	ldr	r3, [pc, #396]	; (800083c <check_message_type+0x2e0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]

	    }//if(veri_akisi_u8 == ON)

	    if ( (ESP_datas.last_line_of_Received_Data[8]  == 'n') && ////////////////////////////////
 80006b4:	4b63      	ldr	r3, [pc, #396]	; (8000844 <check_message_type+0x2e8>)
 80006b6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006ba:	3350      	adds	r3, #80	; 0x50
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b6e      	cmp	r3, #110	; 0x6e
 80006c0:	f040 8124 	bne.w	800090c <check_message_type+0x3b0>
	    	 (ESP_datas.last_line_of_Received_Data[9]  == 'e') &&
 80006c4:	4b5f      	ldr	r3, [pc, #380]	; (8000844 <check_message_type+0x2e8>)
 80006c6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006ca:	3351      	adds	r3, #81	; 0x51
 80006cc:	781b      	ldrb	r3, [r3, #0]
	    if ( (ESP_datas.last_line_of_Received_Data[8]  == 'n') && ////////////////////////////////
 80006ce:	2b65      	cmp	r3, #101	; 0x65
 80006d0:	f040 811c 	bne.w	800090c <check_message_type+0x3b0>
	    	 (ESP_datas.last_line_of_Received_Data[10] == 'w') &&
 80006d4:	4b5b      	ldr	r3, [pc, #364]	; (8000844 <check_message_type+0x2e8>)
 80006d6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006da:	3352      	adds	r3, #82	; 0x52
 80006dc:	781b      	ldrb	r3, [r3, #0]
	    	 (ESP_datas.last_line_of_Received_Data[9]  == 'e') &&
 80006de:	2b77      	cmp	r3, #119	; 0x77
 80006e0:	f040 8114 	bne.w	800090c <check_message_type+0x3b0>
	    	 (ESP_datas.last_line_of_Received_Data[20] == 'h')    )// yes or no NEW hex! .byte byte almaya basla
 80006e4:	4b57      	ldr	r3, [pc, #348]	; (8000844 <check_message_type+0x2e8>)
 80006e6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006ea:	335c      	adds	r3, #92	; 0x5c
 80006ec:	781b      	ldrb	r3, [r3, #0]
	    	 (ESP_datas.last_line_of_Received_Data[10] == 'w') &&
 80006ee:	2b68      	cmp	r3, #104	; 0x68
 80006f0:	f040 810c 	bne.w	800090c <check_message_type+0x3b0>
	    {
	    	uint8_t a,b,c,d;

	    	ESP_datas.Firmware_version_on_board_u32 = *(uint32_t*)0x08008000;
 80006f4:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <check_message_type+0x304>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <check_message_type+0x2e8>)
 80006fa:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80006fe:	33f4      	adds	r3, #244	; 0xf4
 8000700:	601a      	str	r2, [r3, #0]

	        a =((uint8_t) (convertChartoHex(&ESP_datas.last_line_of_Received_Data[11])) << 4) | (convertChartoHex(&ESP_datas.last_line_of_Received_Data[12])) ;
 8000702:	4858      	ldr	r0, [pc, #352]	; (8000864 <check_message_type+0x308>)
 8000704:	f000 fe94 	bl	8001430 <convertChartoHex>
 8000708:	4603      	mov	r3, r0
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	b25e      	sxtb	r6, r3
 800070e:	4856      	ldr	r0, [pc, #344]	; (8000868 <check_message_type+0x30c>)
 8000710:	f000 fe8e 	bl	8001430 <convertChartoHex>
 8000714:	4603      	mov	r3, r0
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4333      	orrs	r3, r6
 800071a:	b25b      	sxtb	r3, r3
 800071c:	74fb      	strb	r3, [r7, #19]
	        b =((uint8_t) (convertChartoHex(&ESP_datas.last_line_of_Received_Data[13])) << 4) | (convertChartoHex(&ESP_datas.last_line_of_Received_Data[14])) ;
 800071e:	4853      	ldr	r0, [pc, #332]	; (800086c <check_message_type+0x310>)
 8000720:	f000 fe86 	bl	8001430 <convertChartoHex>
 8000724:	4603      	mov	r3, r0
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b25e      	sxtb	r6, r3
 800072a:	4851      	ldr	r0, [pc, #324]	; (8000870 <check_message_type+0x314>)
 800072c:	f000 fe80 	bl	8001430 <convertChartoHex>
 8000730:	4603      	mov	r3, r0
 8000732:	b25b      	sxtb	r3, r3
 8000734:	4333      	orrs	r3, r6
 8000736:	b25b      	sxtb	r3, r3
 8000738:	74bb      	strb	r3, [r7, #18]
	        c =((uint8_t) (convertChartoHex(&ESP_datas.last_line_of_Received_Data[15])) << 4) | (convertChartoHex(&ESP_datas.last_line_of_Received_Data[16])) ;
 800073a:	484e      	ldr	r0, [pc, #312]	; (8000874 <check_message_type+0x318>)
 800073c:	f000 fe78 	bl	8001430 <convertChartoHex>
 8000740:	4603      	mov	r3, r0
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	b25e      	sxtb	r6, r3
 8000746:	484c      	ldr	r0, [pc, #304]	; (8000878 <check_message_type+0x31c>)
 8000748:	f000 fe72 	bl	8001430 <convertChartoHex>
 800074c:	4603      	mov	r3, r0
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4333      	orrs	r3, r6
 8000752:	b25b      	sxtb	r3, r3
 8000754:	747b      	strb	r3, [r7, #17]
	        d =((uint8_t) (convertChartoHex(&ESP_datas.last_line_of_Received_Data[17])) << 4) | (convertChartoHex(&ESP_datas.last_line_of_Received_Data[18])) ;
 8000756:	4849      	ldr	r0, [pc, #292]	; (800087c <check_message_type+0x320>)
 8000758:	f000 fe6a 	bl	8001430 <convertChartoHex>
 800075c:	4603      	mov	r3, r0
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	b25e      	sxtb	r6, r3
 8000762:	4847      	ldr	r0, [pc, #284]	; (8000880 <check_message_type+0x324>)
 8000764:	f000 fe64 	bl	8001430 <convertChartoHex>
 8000768:	4603      	mov	r3, r0
 800076a:	b25b      	sxtb	r3, r3
 800076c:	4333      	orrs	r3, r6
 800076e:	b25b      	sxtb	r3, r3
 8000770:	743b      	strb	r3, [r7, #16]
	        uint64_t versiyon= (((uint64_t) a << 24) | ((uint32_t) b << 16) | ((uint16_t) c << 8) | d);
 8000772:	7cfa      	ldrb	r2, [r7, #19]
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	0a15      	lsrs	r5, r2, #8
 800077a:	0614      	lsls	r4, r2, #24
 800077c:	7cbb      	ldrb	r3, [r7, #18]
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	461a      	mov	r2, r3
 8000782:	f04f 0300 	mov.w	r3, #0
 8000786:	ea44 0002 	orr.w	r0, r4, r2
 800078a:	ea45 0103 	orr.w	r1, r5, r3
 800078e:	4605      	mov	r5, r0
 8000790:	460e      	mov	r6, r1
 8000792:	7c7b      	ldrb	r3, [r7, #17]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800079a:	ea45 0103 	orr.w	r1, r5, r3
 800079e:	ea46 0204 	orr.w	r2, r6, r4
 80007a2:	7c3d      	ldrb	r5, [r7, #16]
 80007a4:	f04f 0600 	mov.w	r6, #0
 80007a8:	ea45 0301 	orr.w	r3, r5, r1
 80007ac:	ea46 0402 	orr.w	r4, r6, r2
 80007b0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	        ESP_datas.Firmware_version_on_server_u32 = versiyon;
 80007b4:	68ba      	ldr	r2, [r7, #8]
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <check_message_type+0x2e8>)
 80007b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80007bc:	33f8      	adds	r3, #248	; 0xf8
 80007be:	601a      	str	r2, [r3, #0]

	        if( ESP_datas.Firmware_version_on_board_u32 == 0xFFFFFFFF || ESP_datas.Firmware_version_on_board_u32 != ESP_datas.Firmware_version_on_server_u32 )  //YENİ KOD VAR
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <check_message_type+0x2e8>)
 80007c2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80007c6:	33f4      	adds	r3, #244	; 0xf4
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ce:	d00b      	beq.n	80007e8 <check_message_type+0x28c>
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <check_message_type+0x2e8>)
 80007d2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80007d6:	33f4      	adds	r3, #244	; 0xf4
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <check_message_type+0x2e8>)
 80007dc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80007e0:	33f8      	adds	r3, #248	; 0xf8
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d023      	beq.n	8000830 <check_message_type+0x2d4>
	        {
	        	memset(ESP_datas.Received_Data, 0, sizeof(ESP_datas.Received_Data));
 80007e8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80007ec:	2100      	movs	r1, #0
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <check_message_type+0x2f4>)
 80007f0:	f003 fec0 	bl	8004574 <memset>

	        	memset(ESP_datas.last_line_of_Received_Data, 0, sizeof(ESP_datas.last_line_of_Received_Data));
 80007f4:	22c8      	movs	r2, #200	; 0xc8
 80007f6:	2100      	movs	r1, #0
 80007f8:	4816      	ldr	r0, [pc, #88]	; (8000854 <check_message_type+0x2f8>)
 80007fa:	f003 febb 	bl	8004574 <memset>

	        	memset(ESP_datas.new_firmware_datas, 0, sizeof(ESP_datas.new_firmware_datas));
 80007fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000802:	2100      	movs	r1, #0
 8000804:	481f      	ldr	r0, [pc, #124]	; (8000884 <check_message_type+0x328>)
 8000806:	f003 feb5 	bl	8004574 <memset>

	        	ESP_datas.requestment_type_u8 = NEW_FIRMWARE_REQUEST;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <check_message_type+0x2e8>)
 800080c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000810:	33f1      	adds	r3, #241	; 0xf1
 8000812:	2202      	movs	r2, #2
 8000814:	701a      	strb	r2, [r3, #0]

	        	HAL_UART_Transmit(&huart2,(uint8_t*) "AT+CIPSEND=3\r\n",strlen("AT+CIPSEND=3\r\n"),100);
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <check_message_type+0x2fc>)
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <check_message_type+0x300>)
 800081e:	f002 ff24 	bl	800366a <HAL_UART_Transmit>

	        	ESP_datas.connection_status_with_server = ON;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <check_message_type+0x2e8>)
 8000824:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000828:	33f2      	adds	r3, #242	; 0xf2
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e06d      	b.n	800090c <check_message_type+0x3b0>
			}
			else
			{
				FOTA.State_of_FOTA = EXECUTE_THE_NEW_FIRMWARE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <check_message_type+0x2f0>)
 8000832:	2204      	movs	r2, #4
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e069      	b.n	800090c <check_message_type+0x3b0>
 8000838:	2000d72c 	.word	0x2000d72c
 800083c:	2000d72d 	.word	0x2000d72d
 8000840:	2000d730 	.word	0x2000d730
 8000844:	20000028 	.word	0x20000028
 8000848:	2000d734 	.word	0x2000d734
 800084c:	2000d740 	.word	0x2000d740
 8000850:	20000030 	.word	0x20000030
 8000854:	20009c70 	.word	0x20009c70
 8000858:	0800459c 	.word	0x0800459c
 800085c:	2000d78c 	.word	0x2000d78c
 8000860:	08008000 	.word	0x08008000
 8000864:	20009c7b 	.word	0x20009c7b
 8000868:	20009c7c 	.word	0x20009c7c
 800086c:	20009c7d 	.word	0x20009c7d
 8000870:	20009c7e 	.word	0x20009c7e
 8000874:	20009c7f 	.word	0x20009c7f
 8000878:	20009c80 	.word	0x20009c80
 800087c:	20009c81 	.word	0x20009c81
 8000880:	20009c82 	.word	0x20009c82
 8000884:	20009d39 	.word	0x20009d39
			}
	    }//if ( (Son_Satir_Receive_Data[8]  == 'n')...


		}//if (IPD == response_u8)
        else if(HEX_OR_TEST == response_u8) //hex veya test gönder
 8000888:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <check_message_type+0x4d8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d120      	bne.n	80008d2 <check_message_type+0x376>
        {
        	reset_terminal_datas(&linenumber_u32,ESP_datas.requestment_type_u8);
 8000890:	4b69      	ldr	r3, [pc, #420]	; (8000a38 <check_message_type+0x4dc>)
 8000892:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000896:	33f1      	adds	r3, #241	; 0xf1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4867      	ldr	r0, [pc, #412]	; (8000a3c <check_message_type+0x4e0>)
 800089e:	f000 fbbb 	bl	8001018 <reset_terminal_datas>

        	scan_index_u32 = 0;
 80008a2:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <check_message_type+0x4e4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]

        	if(ESP_ADJUSTMENT_REQUEST == ESP_datas.requestment_type_u8)
 80008a8:	4b63      	ldr	r3, [pc, #396]	; (8000a38 <check_message_type+0x4dc>)
 80008aa:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80008ae:	33f1      	adds	r3, #241	; 0xf1
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d102      	bne.n	80008bc <check_message_type+0x360>
        	{
        		send_command_to_server(COMMAND_TYPE_TEST);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 f8c4 	bl	8000a44 <send_command_to_server>
        	}

        	if(NEW_FIRMWARE_REQUEST == ESP_datas.requestment_type_u8)
 80008bc:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <check_message_type+0x4dc>)
 80008be:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80008c2:	33f1      	adds	r3, #241	; 0xf1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d120      	bne.n	800090c <check_message_type+0x3b0>
        	{
        		send_command_to_server(COMMAND_TYPE_HEX);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f8ba 	bl	8000a44 <send_command_to_server>
 80008d0:	e01c      	b.n	800090c <check_message_type+0x3b0>
        	}
        }
        else if(WIFI_GOT_IP == response_u8)
 80008d2:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <check_message_type+0x4d8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d107      	bne.n	80008ea <check_message_type+0x38e>
        {
	    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 80008da:	2101      	movs	r1, #1
 80008dc:	4857      	ldr	r0, [pc, #348]	; (8000a3c <check_message_type+0x4e0>)
 80008de:	f000 fb9b 	bl	8001018 <reset_terminal_datas>

	    	send_command_to_server(COMMAND_TYPE_AT_CIPSTART);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f000 f8ae 	bl	8000a44 <send_command_to_server>
 80008e8:	e010      	b.n	800090c <check_message_type+0x3b0>
        }
	    else if(BUSY == response_u8 )
 80008ea:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <check_message_type+0x4d8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d10c      	bne.n	800090c <check_message_type+0x3b0>
	    {
	    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 80008f2:	2101      	movs	r1, #1
 80008f4:	4851      	ldr	r0, [pc, #324]	; (8000a3c <check_message_type+0x4e0>)
 80008f6:	f000 fb8f 	bl	8001018 <reset_terminal_datas>

	    	send_command_to_server(COMMAND_TYPE_CLOSE_AT_CIPSEND);
 80008fa:	2003      	movs	r0, #3
 80008fc:	f000 f8a2 	bl	8000a44 <send_command_to_server>

	    	ESP_datas.connection_status_with_server = ON;
 8000900:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <check_message_type+0x4dc>)
 8000902:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000906:	33f2      	adds	r3, #242	; 0xf2
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
	    }

	    if (END_OF_THE_LINE == ESP_datas.rx_data)
 800090c:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <check_message_type+0x4dc>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b0a      	cmp	r3, #10
 8000912:	f040 808a 	bne.w	8000a2a <check_message_type+0x4ce>
	    {
	    	ESP_datas.rx_index = 0;
 8000916:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <check_message_type+0x4dc>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]

	    	linenumber_u32++;
 800091c:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <check_message_type+0x4e0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <check_message_type+0x4e0>)
 8000924:	6013      	str	r3, [r2, #0]

	    	if (linenumber_u32 > 3)  // 3 satır dolmasını bekle, aşağıda esp den gelen yanıtları kıyasla ve ne yapılacağına karar ver.
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <check_message_type+0x4e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d97d      	bls.n	8000a2a <check_message_type+0x4ce>
	    	{
	    		if( (ESP_datas.last_line_of_Received_Data[0] == 'E') &&
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <check_message_type+0x4dc>)
 8000930:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000934:	3348      	adds	r3, #72	; 0x48
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b45      	cmp	r3, #69	; 0x45
 800093a:	d141      	bne.n	80009c0 <check_message_type+0x464>
	    			(ESP_datas.last_line_of_Received_Data[1] == 'R') &&
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <check_message_type+0x4dc>)
 800093e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000942:	3349      	adds	r3, #73	; 0x49
 8000944:	781b      	ldrb	r3, [r3, #0]
	    		if( (ESP_datas.last_line_of_Received_Data[0] == 'E') &&
 8000946:	2b52      	cmp	r3, #82	; 0x52
 8000948:	d13a      	bne.n	80009c0 <check_message_type+0x464>
	    		    (ESP_datas.last_line_of_Received_Data[2] == 'R') &&
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <check_message_type+0x4dc>)
 800094c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000950:	334a      	adds	r3, #74	; 0x4a
 8000952:	781b      	ldrb	r3, [r3, #0]
	    			(ESP_datas.last_line_of_Received_Data[1] == 'R') &&
 8000954:	2b52      	cmp	r3, #82	; 0x52
 8000956:	d133      	bne.n	80009c0 <check_message_type+0x464>
	    		    (ESP_datas.last_line_of_Received_Data[3] == 'O') &&
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <check_message_type+0x4dc>)
 800095a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800095e:	334b      	adds	r3, #75	; 0x4b
 8000960:	781b      	ldrb	r3, [r3, #0]
	    		    (ESP_datas.last_line_of_Received_Data[2] == 'R') &&
 8000962:	2b4f      	cmp	r3, #79	; 0x4f
 8000964:	d12c      	bne.n	80009c0 <check_message_type+0x464>
	    		    (ESP_datas.last_line_of_Received_Data[4] == 'R')   )
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <check_message_type+0x4dc>)
 8000968:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800096c:	334c      	adds	r3, #76	; 0x4c
 800096e:	781b      	ldrb	r3, [r3, #0]
	    		    (ESP_datas.last_line_of_Received_Data[3] == 'O') &&
 8000970:	2b52      	cmp	r3, #82	; 0x52
 8000972:	d125      	bne.n	80009c0 <check_message_type+0x464>
	    		{
	    			check_connected_or_invalid_link(response_u8,linenumber_u32);
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <check_message_type+0x4d8>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <check_message_type+0x4e0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f000 f9f4 	bl	8000d6c <check_connected_or_invalid_link>

	    			if(ALREADY_CONNECTED == response_u8)
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <check_message_type+0x4d8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b04      	cmp	r3, #4
 800098a:	d10d      	bne.n	80009a8 <check_message_type+0x44c>
				    {
				    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 800098c:	2101      	movs	r1, #1
 800098e:	482b      	ldr	r0, [pc, #172]	; (8000a3c <check_message_type+0x4e0>)
 8000990:	f000 fb42 	bl	8001018 <reset_terminal_datas>

				    	send_command_to_server(COMMAND_TYPE_CLOSE_AT_CIPSEND);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f855 	bl	8000a44 <send_command_to_server>

				    	ESP_datas.connection_status_with_server = ON;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <check_message_type+0x4dc>)
 800099c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80009a0:	33f2      	adds	r3, #242	; 0xf2
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
	    			if(ALREADY_CONNECTED == response_u8)
 80009a6:	e03f      	b.n	8000a28 <check_message_type+0x4cc>
				    }
				    else if(LINK_IS_NOT_VALID == response_u8)
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <check_message_type+0x4d8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b05      	cmp	r3, #5
 80009ae:	d13b      	bne.n	8000a28 <check_message_type+0x4cc>
				    {
				    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 80009b0:	2101      	movs	r1, #1
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <check_message_type+0x4e0>)
 80009b4:	f000 fb30 	bl	8001018 <reset_terminal_datas>

				    	send_command_to_server(COMMAND_TYPE_AT_CIPSTART);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f000 f843 	bl	8000a44 <send_command_to_server>
	    			if(ALREADY_CONNECTED == response_u8)
 80009be:	e033      	b.n	8000a28 <check_message_type+0x4cc>
				    }
	    		 }//if (Son_Satir_Receive_Data[0] == 'E'...ERROR
			    else if( (ESP_datas.last_line_of_Received_Data[0] == 'O') &&
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <check_message_type+0x4dc>)
 80009c2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80009c6:	3348      	adds	r3, #72	; 0x48
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b4f      	cmp	r3, #79	; 0x4f
 80009cc:	d12d      	bne.n	8000a2a <check_message_type+0x4ce>
			     		 (ESP_datas.last_line_of_Received_Data[1] == 'K')    )
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <check_message_type+0x4dc>)
 80009d0:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80009d4:	3349      	adds	r3, #73	; 0x49
 80009d6:	781b      	ldrb	r3, [r3, #0]
			    else if( (ESP_datas.last_line_of_Received_Data[0] == 'O') &&
 80009d8:	2b4b      	cmp	r3, #75	; 0x4b
 80009da:	d126      	bne.n	8000a2a <check_message_type+0x4ce>
			    {
			    	check_connect_or_close_situation(response_u8,linenumber_u32);
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <check_message_type+0x4d8>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <check_message_type+0x4e0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4610      	mov	r0, r2
 80009e8:	f000 fa7c 	bl	8000ee4 <check_connect_or_close_situation>

			    	if(CONNECT == response_u8)
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <check_message_type+0x4d8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	d10d      	bne.n	8000a10 <check_message_type+0x4b4>
			        {
				    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4811      	ldr	r0, [pc, #68]	; (8000a3c <check_message_type+0x4e0>)
 80009f8:	f000 fb0e 	bl	8001018 <reset_terminal_datas>

				    	send_command_to_server(COMMAND_TYPE_CLOSE_AT_CIPSEND);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f821 	bl	8000a44 <send_command_to_server>

				    	ESP_datas.connection_status_with_server = ON;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <check_message_type+0x4dc>)
 8000a04:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000a08:	33f2      	adds	r3, #242	; 0xf2
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]



	    	}//if (linenumber_u32 > 3)
		}//if (rx_data == 0x0A)
}
 8000a0e:	e00c      	b.n	8000a2a <check_message_type+0x4ce>
			        else if(CLOSE == response_u8)
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <check_message_type+0x4d8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d108      	bne.n	8000a2a <check_message_type+0x4ce>
				    	reset_terminal_datas(&linenumber_u32,ESP_ADJUSTMENT_REQUEST);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <check_message_type+0x4e0>)
 8000a1c:	f000 fafc 	bl	8001018 <reset_terminal_datas>
				    	send_command_to_server(COMMAND_TYPE_AT_CIPSTART);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f000 f80f 	bl	8000a44 <send_command_to_server>
}
 8000a26:	e000      	b.n	8000a2a <check_message_type+0x4ce>
	    			if(ALREADY_CONNECTED == response_u8)
 8000a28:	bf00      	nop
}
 8000a2a:	bf00      	nop
 8000a2c:	371c      	adds	r7, #28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000d72c 	.word	0x2000d72c
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	2000d738 	.word	0x2000d738
 8000a40:	2000d730 	.word	0x2000d730

08000a44 <send_command_to_server>:


void send_command_to_server(uint8_t command_type)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	uint16_t size = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	81fb      	strh	r3, [r7, #14]

	uint8_t *pData = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]

	switch(command_type)
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d826      	bhi.n	8000aaa <send_command_to_server+0x66>
 8000a5c:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <send_command_to_server+0x20>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000a79 	.word	0x08000a79
 8000a68:	08000a83 	.word	0x08000a83
 8000a6c:	08000a8d 	.word	0x08000a8d
 8000a70:	08000a97 	.word	0x08000a97
 8000a74:	08000aa1 	.word	0x08000aa1
	{
	case COMMAND_TYPE_HEX:
	{
		pData = (uint8_t*)"hex";
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <send_command_to_server+0x7c>)
 8000a7a:	60bb      	str	r3, [r7, #8]

		size = strlen("hex");
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	81fb      	strh	r3, [r7, #14]

		break;
 8000a80:	e013      	b.n	8000aaa <send_command_to_server+0x66>
	}
	case COMMAND_TYPE_TEST:
	{
		pData = (uint8_t*)"test";
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <send_command_to_server+0x80>)
 8000a84:	60bb      	str	r3, [r7, #8]

		size = strlen("test");
 8000a86:	2304      	movs	r3, #4
 8000a88:	81fb      	strh	r3, [r7, #14]

		break;
 8000a8a:	e00e      	b.n	8000aaa <send_command_to_server+0x66>
	}
	case COMMAND_TYPE_AT_CIPSTART:
	{
		pData = (uint8_t*)"AT+CIPSTART=\"TCP\",\"192.168.0.28\",1234\r\n";
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <send_command_to_server+0x84>)
 8000a8e:	60bb      	str	r3, [r7, #8]

		size = strlen("AT+CIPSTART=\"TCP\",\"192.168.0.28\",1234\r\n");
 8000a90:	2327      	movs	r3, #39	; 0x27
 8000a92:	81fb      	strh	r3, [r7, #14]

		break;
 8000a94:	e009      	b.n	8000aaa <send_command_to_server+0x66>
	}
	case COMMAND_TYPE_CLOSE_AT_CIPSEND:
	{
		pData = (uint8_t*)"AT+CIPSEND=4\r\n";
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <send_command_to_server+0x88>)
 8000a98:	60bb      	str	r3, [r7, #8]

		size = strlen("AT+CIPSEND=4\r\n");
 8000a9a:	230e      	movs	r3, #14
 8000a9c:	81fb      	strh	r3, [r7, #14]

		break;
 8000a9e:	e004      	b.n	8000aaa <send_command_to_server+0x66>
	}
	case COMMAND_TYPE_CLOSE_AT_CIPSEND_3:
	{
		pData = (uint8_t*)"AT+CIPSEND=3\r\n";
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <send_command_to_server+0x8c>)
 8000aa2:	60bb      	str	r3, [r7, #8]

		size = strlen("AT+CIPSEND=3\r\n");
 8000aa4:	230e      	movs	r3, #14
 8000aa6:	81fb      	strh	r3, [r7, #14]

		break;
 8000aa8:	bf00      	nop
	}
	}//switch(command_type)

	HAL_UART_Transmit(&huart2,pData,size,100);
 8000aaa:	89fa      	ldrh	r2, [r7, #14]
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <send_command_to_server+0x90>)
 8000ab2:	f002 fdda 	bl	800366a <HAL_UART_Transmit>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	080045ac 	.word	0x080045ac
 8000ac4:	080045b0 	.word	0x080045b0
 8000ac8:	080045b8 	.word	0x080045b8
 8000acc:	080045e0 	.word	0x080045e0
 8000ad0:	0800459c 	.word	0x0800459c
 8000ad4:	2000d78c 	.word	0x2000d78c

08000ad8 <check_start_and_stop_bits>:

void check_start_and_stop_bits(uint8_t veri_akisi_u8, uint32_t scan_index_u32)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
    static uint8_t  Flag_STOP_bit_u8  = 0;
    static uint8_t  Flag_START_bit_u8 = 0;

	if((ESP_datas.last_line_of_Received_Data[scan_index_u32-2] == '-')&&
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3b02      	subs	r3, #2
 8000ae8:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000af0:	3348      	adds	r3, #72	; 0x48
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b2d      	cmp	r3, #45	; 0x2d
 8000af6:	d116      	bne.n	8000b26 <check_start_and_stop_bits+0x4e>
       (ESP_datas.last_line_of_Received_Data[scan_index_u32-1] == '2')&&
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	4a30      	ldr	r2, [pc, #192]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000afe:	4413      	add	r3, r2
 8000b00:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b04:	3348      	adds	r3, #72	; 0x48
 8000b06:	781b      	ldrb	r3, [r3, #0]
	if((ESP_datas.last_line_of_Received_Data[scan_index_u32-2] == '-')&&
 8000b08:	2b32      	cmp	r3, #50	; 0x32
 8000b0a:	d10c      	bne.n	8000b26 <check_start_and_stop_bits+0x4e>
       (ESP_datas.last_line_of_Received_Data[scan_index_u32]   == '-')   )
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b16:	3348      	adds	r3, #72	; 0x48
 8000b18:	781b      	ldrb	r3, [r3, #0]
       (ESP_datas.last_line_of_Received_Data[scan_index_u32-1] == '2')&&
 8000b1a:	2b2d      	cmp	r3, #45	; 0x2d
 8000b1c:	d103      	bne.n	8000b26 <check_start_and_stop_bits+0x4e>
    {
		Flag_STOP_bit_u8 = ON;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <check_start_and_stop_bits+0xec>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e01f      	b.n	8000b66 <check_start_and_stop_bits+0x8e>
    }
    else if ((ESP_datas.last_line_of_Received_Data[scan_index_u32-2] == '-') &&
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3b02      	subs	r3, #2
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b32:	3348      	adds	r3, #72	; 0x48
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b2d      	cmp	r3, #45	; 0x2d
 8000b38:	d115      	bne.n	8000b66 <check_start_and_stop_bits+0x8e>
			 (ESP_datas.last_line_of_Received_Data[scan_index_u32-1] == '1') &&
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000b40:	4413      	add	r3, r2
 8000b42:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b46:	3348      	adds	r3, #72	; 0x48
 8000b48:	781b      	ldrb	r3, [r3, #0]
    else if ((ESP_datas.last_line_of_Received_Data[scan_index_u32-2] == '-') &&
 8000b4a:	2b31      	cmp	r3, #49	; 0x31
 8000b4c:	d10b      	bne.n	8000b66 <check_start_and_stop_bits+0x8e>
			 (ESP_datas.last_line_of_Received_Data[scan_index_u32]   == '-')    )
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b58:	3348      	adds	r3, #72	; 0x48
 8000b5a:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[scan_index_u32-1] == '1') &&
 8000b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8000b5e:	d102      	bne.n	8000b66 <check_start_and_stop_bits+0x8e>
	{
    	Flag_START_bit_u8 = ON;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <check_start_and_stop_bits+0xf0>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
	}
	if (ON == Flag_STOP_bit_u8)     //her 176 byte için stop bitini bekle
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <check_start_and_stop_bits+0xec>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d110      	bne.n	8000b90 <check_start_and_stop_bits+0xb8>
	{
		veri_akisi_u8 = ON;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]

		ESP_datas.Stop_byte_index = scan_index_u32 - 2;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3b02      	subs	r3, #2
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000b7c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000b80:	33e5      	adds	r3, #229	; 0xe5
 8000b82:	701a      	strb	r2, [r3, #0]

		Flag_START_bit_u8 = OFF;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <check_start_and_stop_bits+0xf0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]

		Flag_STOP_bit_u8  = OFF;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <check_start_and_stop_bits+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	}
	scan_index_u32++;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	603b      	str	r3, [r7, #0]

	if (ON == Flag_START_bit_u8)     //her 176byte için start bitini bekle
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <check_start_and_stop_bits+0xf0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d109      	bne.n	8000bb2 <check_start_and_stop_bits+0xda>
	{
		ESP_datas.Start_byte_index = scan_index_u32;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <check_start_and_stop_bits+0xe8>)
 8000ba4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000ba8:	33e4      	adds	r3, #228	; 0xe4
 8000baa:	701a      	strb	r2, [r3, #0]

		Flag_START_bit_u8 = OFF;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <check_start_and_stop_bits+0xf0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	2000d73c 	.word	0x2000d73c
 8000bc8:	2000d73d 	.word	0x2000d73d

08000bcc <check_stop_bits>:



void check_stop_bits(uint8_t stop_bits_type_u8)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if ((ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 2] == '-') &&
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <check_stop_bits+0xc4>)
 8000bd8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000bdc:	33ec      	adds	r3, #236	; 0xec
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b02      	subs	r3, #2
 8000be2:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <check_stop_bits+0xc4>)
 8000be4:	4413      	add	r3, r2
 8000be6:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000bea:	3311      	adds	r3, #17
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b2d      	cmp	r3, #45	; 0x2d
 8000bf0:	d11d      	bne.n	8000c2e <check_stop_bits+0x62>
		(ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 1] == '0') &&
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <check_stop_bits+0xc4>)
 8000bf4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000bf8:	33ec      	adds	r3, #236	; 0xec
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <check_stop_bits+0xc4>)
 8000c00:	4413      	add	r3, r2
 8000c02:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000c06:	3311      	adds	r3, #17
 8000c08:	781b      	ldrb	r3, [r3, #0]
	if ((ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 2] == '-') &&
 8000c0a:	2b30      	cmp	r3, #48	; 0x30
 8000c0c:	d10f      	bne.n	8000c2e <check_stop_bits+0x62>
		(ESP_datas.new_firmware_datas[ESP_datas.SGTD_index]     == '-')   ) //SON pakette geldi
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <check_stop_bits+0xc4>)
 8000c10:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000c14:	33ec      	adds	r3, #236	; 0xec
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <check_stop_bits+0xc4>)
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000c20:	3311      	adds	r3, #17
 8000c22:	781b      	ldrb	r3, [r3, #0]
		(ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 1] == '0') &&
 8000c24:	2b2d      	cmp	r3, #45	; 0x2d
 8000c26:	d102      	bne.n	8000c2e <check_stop_bits+0x62>
	{
		stop_bits_type_u8 = LAST_STOP_BITS;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	71fb      	strb	r3, [r7, #7]
		     (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 1] == '6') &&
			 (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index]     == '-')   )//SGTD'yı dolduracak kadar byte geldi(1paket)
	{
    	stop_bits_type_u8 = PACKET_STOP_BITS;
	}
}
 8000c2c:	e02a      	b.n	8000c84 <check_stop_bits+0xb8>
    else if( (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 2] == '-') &&
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <check_stop_bits+0xc4>)
 8000c30:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000c34:	33ec      	adds	r3, #236	; 0xec
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3b02      	subs	r3, #2
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <check_stop_bits+0xc4>)
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000c42:	3311      	adds	r3, #17
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b2d      	cmp	r3, #45	; 0x2d
 8000c48:	d11c      	bne.n	8000c84 <check_stop_bits+0xb8>
		     (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 1] == '6') &&
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <check_stop_bits+0xc4>)
 8000c4c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000c50:	33ec      	adds	r3, #236	; 0xec
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <check_stop_bits+0xc4>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000c5e:	3311      	adds	r3, #17
 8000c60:	781b      	ldrb	r3, [r3, #0]
    else if( (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 2] == '-') &&
 8000c62:	2b36      	cmp	r3, #54	; 0x36
 8000c64:	d10e      	bne.n	8000c84 <check_stop_bits+0xb8>
			 (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index]     == '-')   )//SGTD'yı dolduracak kadar byte geldi(1paket)
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <check_stop_bits+0xc4>)
 8000c68:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8000c6c:	33ec      	adds	r3, #236	; 0xec
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <check_stop_bits+0xc4>)
 8000c72:	4413      	add	r3, r2
 8000c74:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8000c78:	3311      	adds	r3, #17
 8000c7a:	781b      	ldrb	r3, [r3, #0]
		     (ESP_datas.new_firmware_datas[ESP_datas.SGTD_index - 1] == '6') &&
 8000c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8000c7e:	d101      	bne.n	8000c84 <check_stop_bits+0xb8>
    	stop_bits_type_u8 = PACKET_STOP_BITS;
 8000c80:	2300      	movs	r3, #0
 8000c82:	71fb      	strb	r3, [r7, #7]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000028 	.word	0x20000028

08000c94 <check_first_response>:

void check_first_response(uint8_t first_response_u8)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	if (ESP_datas.last_line_of_Received_Data[0] == '+')
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <check_first_response+0xd4>)
 8000ca0:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000ca4:	3348      	adds	r3, #72	; 0x48
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b2b      	cmp	r3, #43	; 0x2b
 8000caa:	d102      	bne.n	8000cb2 <check_first_response+0x1e>
	{
		first_response_u8 = IPD;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
			 (ESP_datas.last_line_of_Received_Data[2] == 's') &&
			 (ESP_datas.last_line_of_Received_Data[3] == 'y')   )
	{
		first_response_u8 = BUSY;
	}
}
 8000cb0:	e054      	b.n	8000d5c <check_first_response+0xc8>
	else if(ESP_datas.last_line_of_Received_Data[0] == '>') //hex veya test gönder
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <check_first_response+0xd4>)
 8000cb4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000cb8:	3348      	adds	r3, #72	; 0x48
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8000cbe:	d102      	bne.n	8000cc6 <check_first_response+0x32>
		first_response_u8 = HEX_OR_TEST;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
}
 8000cc4:	e04a      	b.n	8000d5c <check_first_response+0xc8>
	else if( (ESP_datas.last_line_of_Received_Data[0] == 'W') &&
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <check_first_response+0xd4>)
 8000cc8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000ccc:	3348      	adds	r3, #72	; 0x48
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b57      	cmp	r3, #87	; 0x57
 8000cd2:	d125      	bne.n	8000d20 <check_first_response+0x8c>
			 (ESP_datas.last_line_of_Received_Data[1] == 'I') &&
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <check_first_response+0xd4>)
 8000cd6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000cda:	3349      	adds	r3, #73	; 0x49
 8000cdc:	781b      	ldrb	r3, [r3, #0]
	else if( (ESP_datas.last_line_of_Received_Data[0] == 'W') &&
 8000cde:	2b49      	cmp	r3, #73	; 0x49
 8000ce0:	d11e      	bne.n	8000d20 <check_first_response+0x8c>
			 (ESP_datas.last_line_of_Received_Data[2] == 'F') &&
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <check_first_response+0xd4>)
 8000ce4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000ce8:	334a      	adds	r3, #74	; 0x4a
 8000cea:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[1] == 'I') &&
 8000cec:	2b46      	cmp	r3, #70	; 0x46
 8000cee:	d117      	bne.n	8000d20 <check_first_response+0x8c>
			 (ESP_datas.last_line_of_Received_Data[3] == 'I') &&
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <check_first_response+0xd4>)
 8000cf2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000cf6:	334b      	adds	r3, #75	; 0x4b
 8000cf8:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[2] == 'F') &&
 8000cfa:	2b49      	cmp	r3, #73	; 0x49
 8000cfc:	d110      	bne.n	8000d20 <check_first_response+0x8c>
			 (ESP_datas.last_line_of_Received_Data[5] == 'G') &&
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <check_first_response+0xd4>)
 8000d00:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d04:	334d      	adds	r3, #77	; 0x4d
 8000d06:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[3] == 'I') &&
 8000d08:	2b47      	cmp	r3, #71	; 0x47
 8000d0a:	d109      	bne.n	8000d20 <check_first_response+0x8c>
			 (ESP_datas.last_line_of_Received_Data[6] == 'O')   )
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <check_first_response+0xd4>)
 8000d0e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d12:	334e      	adds	r3, #78	; 0x4e
 8000d14:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[5] == 'G') &&
 8000d16:	2b4f      	cmp	r3, #79	; 0x4f
 8000d18:	d102      	bne.n	8000d20 <check_first_response+0x8c>
		first_response_u8 = WIFI_GOT_IP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	71fb      	strb	r3, [r7, #7]
}
 8000d1e:	e01d      	b.n	8000d5c <check_first_response+0xc8>
	else if( (ESP_datas.last_line_of_Received_Data[0] == 'b') &&
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <check_first_response+0xd4>)
 8000d22:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d26:	3348      	adds	r3, #72	; 0x48
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b62      	cmp	r3, #98	; 0x62
 8000d2c:	d116      	bne.n	8000d5c <check_first_response+0xc8>
			 (ESP_datas.last_line_of_Received_Data[1] == 'u') &&
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <check_first_response+0xd4>)
 8000d30:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d34:	3349      	adds	r3, #73	; 0x49
 8000d36:	781b      	ldrb	r3, [r3, #0]
	else if( (ESP_datas.last_line_of_Received_Data[0] == 'b') &&
 8000d38:	2b75      	cmp	r3, #117	; 0x75
 8000d3a:	d10f      	bne.n	8000d5c <check_first_response+0xc8>
			 (ESP_datas.last_line_of_Received_Data[2] == 's') &&
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <check_first_response+0xd4>)
 8000d3e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d42:	334a      	adds	r3, #74	; 0x4a
 8000d44:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[1] == 'u') &&
 8000d46:	2b73      	cmp	r3, #115	; 0x73
 8000d48:	d108      	bne.n	8000d5c <check_first_response+0xc8>
			 (ESP_datas.last_line_of_Received_Data[3] == 'y')   )
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <check_first_response+0xd4>)
 8000d4c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000d50:	334b      	adds	r3, #75	; 0x4b
 8000d52:	781b      	ldrb	r3, [r3, #0]
			 (ESP_datas.last_line_of_Received_Data[2] == 's') &&
 8000d54:	2b79      	cmp	r3, #121	; 0x79
 8000d56:	d101      	bne.n	8000d5c <check_first_response+0xc8>
		first_response_u8 = BUSY;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	71fb      	strb	r3, [r7, #7]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000028 	.word	0x20000028

08000d6c <check_connected_or_invalid_link>:

void check_connected_or_invalid_link(uint8_t already_connected_or_invalid_link_u8,uint32_t linenumber_u32)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
	if( (ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'A') &&
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3b03      	subs	r3, #3
 8000d7c:	4a58      	ldr	r2, [pc, #352]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000d7e:	21c8      	movs	r1, #200	; 0xc8
 8000d80:	fb01 f303 	mul.w	r3, r1, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	3308      	adds	r3, #8
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b41      	cmp	r3, #65	; 0x41
 8000d8c:	d139      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
        (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'L') &&
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000d94:	21c8      	movs	r1, #200	; 0xc8
 8000d96:	fb01 f303 	mul.w	r3, r1, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3309      	adds	r3, #9
 8000d9e:	781b      	ldrb	r3, [r3, #0]
	if( (ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'A') &&
 8000da0:	2b4c      	cmp	r3, #76	; 0x4c
 8000da2:	d12e      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
        (ESP_datas.Received_Data[linenumber_u32 - 3][2] == 'R') &&
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	3b03      	subs	r3, #3
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000daa:	21c8      	movs	r1, #200	; 0xc8
 8000dac:	fb01 f303 	mul.w	r3, r1, r3
 8000db0:	4413      	add	r3, r2
 8000db2:	330a      	adds	r3, #10
 8000db4:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'L') &&
 8000db6:	2b52      	cmp	r3, #82	; 0x52
 8000db8:	d123      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
        (ESP_datas.Received_Data[linenumber_u32 - 3][3] == 'E') &&
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	4a48      	ldr	r2, [pc, #288]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000dc0:	21c8      	movs	r1, #200	; 0xc8
 8000dc2:	fb01 f303 	mul.w	r3, r1, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	330b      	adds	r3, #11
 8000dca:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][2] == 'R') &&
 8000dcc:	2b45      	cmp	r3, #69	; 0x45
 8000dce:	d118      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
        (ESP_datas.Received_Data[linenumber_u32 - 3][4] == 'A') &&
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3b03      	subs	r3, #3
 8000dd4:	4a42      	ldr	r2, [pc, #264]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000dd6:	21c8      	movs	r1, #200	; 0xc8
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	330c      	adds	r3, #12
 8000de0:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][3] == 'E') &&
 8000de2:	2b41      	cmp	r3, #65	; 0x41
 8000de4:	d10d      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
        (ESP_datas.Received_Data[linenumber_u32 - 3][5] == 'D')   )
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	4a3d      	ldr	r2, [pc, #244]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000dec:	21c8      	movs	r1, #200	; 0xc8
 8000dee:	fb01 f303 	mul.w	r3, r1, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	330d      	adds	r3, #13
 8000df6:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][4] == 'A') &&
 8000df8:	2b44      	cmp	r3, #68	; 0x44
 8000dfa:	d102      	bne.n	8000e02 <check_connected_or_invalid_link+0x96>
    {

		already_connected_or_invalid_link_u8 = ALREADY_CONNECTED;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	e068      	b.n	8000ed4 <check_connected_or_invalid_link+0x168>
    }
    else if((ESP_datas.Received_Data[linenumber_u32 - 3][22] == 'A') &&   //esp sıfırdan başladığında hatalı
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e08:	21c8      	movs	r1, #200	; 0xc8
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	331e      	adds	r3, #30
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b41      	cmp	r3, #65	; 0x41
 8000e16:	d139      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
            (ESP_datas.Received_Data[linenumber_u32 - 3][23] == 'L') &&
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3b03      	subs	r3, #3
 8000e1c:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e1e:	21c8      	movs	r1, #200	; 0xc8
 8000e20:	fb01 f303 	mul.w	r3, r1, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	331f      	adds	r3, #31
 8000e28:	781b      	ldrb	r3, [r3, #0]
    else if((ESP_datas.Received_Data[linenumber_u32 - 3][22] == 'A') &&   //esp sıfırdan başladığında hatalı
 8000e2a:	2b4c      	cmp	r3, #76	; 0x4c
 8000e2c:	d12e      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
            (ESP_datas.Received_Data[linenumber_u32 - 3][24] == 'R') &&
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e34:	21c8      	movs	r1, #200	; 0xc8
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3320      	adds	r3, #32
 8000e3e:	781b      	ldrb	r3, [r3, #0]
            (ESP_datas.Received_Data[linenumber_u32 - 3][23] == 'L') &&
 8000e40:	2b52      	cmp	r3, #82	; 0x52
 8000e42:	d123      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
            (ESP_datas.Received_Data[linenumber_u32 - 3][25] == 'E') &&
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	3b03      	subs	r3, #3
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e4a:	21c8      	movs	r1, #200	; 0xc8
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	3321      	adds	r3, #33	; 0x21
 8000e54:	781b      	ldrb	r3, [r3, #0]
            (ESP_datas.Received_Data[linenumber_u32 - 3][24] == 'R') &&
 8000e56:	2b45      	cmp	r3, #69	; 0x45
 8000e58:	d118      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
            (ESP_datas.Received_Data[linenumber_u32 - 3][26] == 'A') &&
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e60:	21c8      	movs	r1, #200	; 0xc8
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	3322      	adds	r3, #34	; 0x22
 8000e6a:	781b      	ldrb	r3, [r3, #0]
            (ESP_datas.Received_Data[linenumber_u32 - 3][25] == 'E') &&
 8000e6c:	2b41      	cmp	r3, #65	; 0x41
 8000e6e:	d10d      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
            (ESP_datas.Received_Data[linenumber_u32 - 3][27] == 'D')   )
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3b03      	subs	r3, #3
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e76:	21c8      	movs	r1, #200	; 0xc8
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3323      	adds	r3, #35	; 0x23
 8000e80:	781b      	ldrb	r3, [r3, #0]
            (ESP_datas.Received_Data[linenumber_u32 - 3][26] == 'A') &&
 8000e82:	2b44      	cmp	r3, #68	; 0x44
 8000e84:	d102      	bne.n	8000e8c <check_connected_or_invalid_link+0x120>
    {
		already_connected_or_invalid_link_u8 = ALREADY_CONNECTED;
 8000e86:	2304      	movs	r3, #4
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e023      	b.n	8000ed4 <check_connected_or_invalid_link+0x168>
    }
    else if((ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'L') &&
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3b03      	subs	r3, #3
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000e92:	21c8      	movs	r1, #200	; 0xc8
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b4c      	cmp	r3, #76	; 0x4c
 8000ea0:	d118      	bne.n	8000ed4 <check_connected_or_invalid_link+0x168>
            (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'I') &&
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000ea8:	21c8      	movs	r1, #200	; 0xc8
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	3309      	adds	r3, #9
 8000eb2:	781b      	ldrb	r3, [r3, #0]
    else if((ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'L') &&
 8000eb4:	2b49      	cmp	r3, #73	; 0x49
 8000eb6:	d10d      	bne.n	8000ed4 <check_connected_or_invalid_link+0x168>
            (ESP_datas.Received_Data[linenumber_u32 - 3][2] == 'N')   )//LINK İS NOT VALİD
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3b03      	subs	r3, #3
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <check_connected_or_invalid_link+0x174>)
 8000ebe:	21c8      	movs	r1, #200	; 0xc8
 8000ec0:	fb01 f303 	mul.w	r3, r1, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	330a      	adds	r3, #10
 8000ec8:	781b      	ldrb	r3, [r3, #0]
            (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'I') &&
 8000eca:	2b4e      	cmp	r3, #78	; 0x4e
 8000ecc:	d102      	bne.n	8000ed4 <check_connected_or_invalid_link+0x168>
    {
		already_connected_or_invalid_link_u8 = LINK_IS_NOT_VALID;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	71fb      	strb	r3, [r7, #7]
    }
}
 8000ed2:	e7ff      	b.n	8000ed4 <check_connected_or_invalid_link+0x168>
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000028 	.word	0x20000028

08000ee4 <check_connect_or_close_situation>:


void check_connect_or_close_situation(uint8_t connect_or_close_u8,uint32_t linenumber_u32)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
	if( (ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'C' ) &&
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	3b03      	subs	r3, #3
 8000ef4:	4a47      	ldr	r2, [pc, #284]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000ef6:	21c8      	movs	r1, #200	; 0xc8
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	3308      	adds	r3, #8
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b43      	cmp	r3, #67	; 0x43
 8000f04:	d15a      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'O' ) &&
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	4a42      	ldr	r2, [pc, #264]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f0c:	21c8      	movs	r1, #200	; 0xc8
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	3309      	adds	r3, #9
 8000f16:	781b      	ldrb	r3, [r3, #0]
	if( (ESP_datas.Received_Data[linenumber_u32 - 3][0] == 'C' ) &&
 8000f18:	2b4f      	cmp	r3, #79	; 0x4f
 8000f1a:	d14f      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][2] == 'N' ) &&
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3b03      	subs	r3, #3
 8000f20:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f22:	21c8      	movs	r1, #200	; 0xc8
 8000f24:	fb01 f303 	mul.w	r3, r1, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	330a      	adds	r3, #10
 8000f2c:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][1] == 'O' ) &&
 8000f2e:	2b4e      	cmp	r3, #78	; 0x4e
 8000f30:	d144      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][3] == 'N' ) &&
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f38:	21c8      	movs	r1, #200	; 0xc8
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	330b      	adds	r3, #11
 8000f42:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][2] == 'N' ) &&
 8000f44:	2b4e      	cmp	r3, #78	; 0x4e
 8000f46:	d139      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][4] == 'E' ) &&
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3b03      	subs	r3, #3
 8000f4c:	4a31      	ldr	r2, [pc, #196]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f4e:	21c8      	movs	r1, #200	; 0xc8
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	330c      	adds	r3, #12
 8000f58:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][3] == 'N' ) &&
 8000f5a:	2b45      	cmp	r3, #69	; 0x45
 8000f5c:	d12e      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][5] == 'C' ) &&
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f64:	21c8      	movs	r1, #200	; 0xc8
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	330d      	adds	r3, #13
 8000f6e:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][4] == 'E' ) &&
 8000f70:	2b43      	cmp	r3, #67	; 0x43
 8000f72:	d123      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][6] == 'T' ) &&
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3b03      	subs	r3, #3
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f7a:	21c8      	movs	r1, #200	; 0xc8
 8000f7c:	fb01 f303 	mul.w	r3, r1, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	330e      	adds	r3, #14
 8000f84:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][5] == 'C' ) &&
 8000f86:	2b54      	cmp	r3, #84	; 0x54
 8000f88:	d118      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][7] == '\r') &&
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000f90:	21c8      	movs	r1, #200	; 0xc8
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	330f      	adds	r3, #15
 8000f9a:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][6] == 'T' ) &&
 8000f9c:	2b0d      	cmp	r3, #13
 8000f9e:	d10d      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
        (ESP_datas.Received_Data[linenumber_u32 - 3][8] == '\n')    )//CONNECT
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3b03      	subs	r3, #3
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000fa6:	21c8      	movs	r1, #200	; 0xc8
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	3310      	adds	r3, #16
 8000fb0:	781b      	ldrb	r3, [r3, #0]
        (ESP_datas.Received_Data[linenumber_u32 - 3][7] == '\r') &&
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d102      	bne.n	8000fbc <check_connect_or_close_situation+0xd8>
    {
		connect_or_close_u8 = CONNECT;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	71fb      	strb	r3, [r7, #7]
    		 (ESP_datas.last_line_of_Received_Data[3] == 'S') &&
    		 (ESP_datas.last_line_of_Received_Data[4] == 'E')   )
    {
    	connect_or_close_u8 = CLOSE;
    }
}
 8000fba:	e024      	b.n	8001006 <check_connect_or_close_situation+0x122>
    else if( (ESP_datas.last_line_of_Received_Data[0] == 'C') &&
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000fbe:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000fc2:	3348      	adds	r3, #72	; 0x48
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b43      	cmp	r3, #67	; 0x43
 8000fc8:	d11d      	bne.n	8001006 <check_connect_or_close_situation+0x122>
    		 (ESP_datas.last_line_of_Received_Data[1] == 'L') &&
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000fcc:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000fd0:	3349      	adds	r3, #73	; 0x49
 8000fd2:	781b      	ldrb	r3, [r3, #0]
    else if( (ESP_datas.last_line_of_Received_Data[0] == 'C') &&
 8000fd4:	2b4c      	cmp	r3, #76	; 0x4c
 8000fd6:	d116      	bne.n	8001006 <check_connect_or_close_situation+0x122>
    		 (ESP_datas.last_line_of_Received_Data[2] == 'O') &&
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000fda:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000fde:	334a      	adds	r3, #74	; 0x4a
 8000fe0:	781b      	ldrb	r3, [r3, #0]
    		 (ESP_datas.last_line_of_Received_Data[1] == 'L') &&
 8000fe2:	2b4f      	cmp	r3, #79	; 0x4f
 8000fe4:	d10f      	bne.n	8001006 <check_connect_or_close_situation+0x122>
    		 (ESP_datas.last_line_of_Received_Data[3] == 'S') &&
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000fe8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000fec:	334b      	adds	r3, #75	; 0x4b
 8000fee:	781b      	ldrb	r3, [r3, #0]
    		 (ESP_datas.last_line_of_Received_Data[2] == 'O') &&
 8000ff0:	2b53      	cmp	r3, #83	; 0x53
 8000ff2:	d108      	bne.n	8001006 <check_connect_or_close_situation+0x122>
    		 (ESP_datas.last_line_of_Received_Data[4] == 'E')   )
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <check_connect_or_close_situation+0x130>)
 8000ff6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000ffa:	334c      	adds	r3, #76	; 0x4c
 8000ffc:	781b      	ldrb	r3, [r3, #0]
    		 (ESP_datas.last_line_of_Received_Data[3] == 'S') &&
 8000ffe:	2b45      	cmp	r3, #69	; 0x45
 8001000:	d101      	bne.n	8001006 <check_connect_or_close_situation+0x122>
    	connect_or_close_u8 = CLOSE;
 8001002:	2307      	movs	r3, #7
 8001004:	71fb      	strb	r3, [r7, #7]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000028 	.word	0x20000028

08001018 <reset_terminal_datas>:

void reset_terminal_datas(uint32_t* linenumber_u32,uint8_t requestment_type_u8)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	memset(ESP_datas.Received_Data, 0, sizeof(ESP_datas.Received_Data));
 8001024:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001028:	2100      	movs	r1, #0
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <reset_terminal_datas+0x3c>)
 800102c:	f003 faa2 	bl	8004574 <memset>

	memset(ESP_datas.last_line_of_Received_Data,0, sizeof(ESP_datas.last_line_of_Received_Data));
 8001030:	22c8      	movs	r2, #200	; 0xc8
 8001032:	2100      	movs	r1, #0
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <reset_terminal_datas+0x40>)
 8001036:	f003 fa9d 	bl	8004574 <memset>

	*linenumber_u32 = 0;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]

   	ESP_datas.requestment_type_u8 = requestment_type_u8;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <reset_terminal_datas+0x44>)
 8001042:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8001046:	33f1      	adds	r3, #241	; 0xf1
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000030 	.word	0x20000030
 8001058:	20009c70 	.word	0x20009c70
 800105c:	20000028 	.word	0x20000028

08001060 <FOTA_main>:
 * Write the first part on flash
 * Get the last of the data, arrange and write.
 * Execute the new firmware.
 ********************************************************************************************************************************/
void FOTA_main()
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
	static uint32_t Buffer_index;

	switch (FOTA.State_of_FOTA)
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <FOTA_main+0x174>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b04      	cmp	r3, #4
 800106c:	f200 80ad 	bhi.w	80011ca <FOTA_main+0x16a>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <FOTA_main+0x18>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	080011c9 	.word	0x080011c9
 800107c:	0800108d 	.word	0x0800108d
 8001080:	080010a5 	.word	0x080010a5
 8001084:	08001139 	.word	0x08001139
 8001088:	0800118b 	.word	0x0800118b
	{
		break;
	}
	case ARRANGE_THE_DATA:
	{
    	FOTA.last_used_flash_address = OFF;
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <FOTA_main+0x174>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]

		endiannes_arrangement(Buffer_index);
 8001092:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <FOTA_main+0x178>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8de 	bl	8001258 <endiannes_arrangement>

	    FOTA.State_of_FOTA = WRITE_NEW_FIRMWARE_ON_FLASH;
 800109c:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <FOTA_main+0x174>)
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]

	    break;
 80010a2:	e092      	b.n	80011ca <FOTA_main+0x16a>
    }
    case WRITE_NEW_FIRMWARE_ON_FLASH:
    {
        FOTA.last_used_flash_address = ESP_datas.flash_son_adres_eki;
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <FOTA_main+0x17c>)
 80010a6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80010aa:	33fc      	adds	r3, #252	; 0xfc
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <FOTA_main+0x174>)
 80010b0:	6053      	str	r3, [r2, #4]

        if( OFF == FOTA.last_used_flash_address) //for first entrance
 80010b2:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <FOTA_main+0x174>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <FOTA_main+0x5e>
        {
        	Flash_erase();
 80010ba:	f000 f979 	bl	80013b0 <Flash_erase>
        }

        for (int i = 0; i < Buffer_index; i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e01c      	b.n	80010fe <FOTA_main+0x9e>
        {
        	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
    		        		  START_ADDRESS_OF_NEW_FIRMWARE + FOTA.last_used_flash_address,
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <FOTA_main+0x174>)
 80010c6:	685b      	ldr	r3, [r3, #4]
        	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80010c8:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80010cc:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
					     	  *(uint32_t*)&ESP_datas.new_firmware_datas_u32[i]);
 80010d0:	4a42      	ldr	r2, [pc, #264]	; (80011dc <FOTA_main+0x17c>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80010d8:	3308      	adds	r3, #8
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	685b      	ldr	r3, [r3, #4]
        	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80010e0:	f04f 0400 	mov.w	r4, #0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	2002      	movs	r0, #2
 80010ea:	f000 fe3f 	bl	8001d6c <HAL_FLASH_Program>

		    FOTA.last_used_flash_address = FOTA.last_used_flash_address + 4;
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <FOTA_main+0x174>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	3304      	adds	r3, #4
 80010f4:	4a37      	ldr	r2, [pc, #220]	; (80011d4 <FOTA_main+0x174>)
 80010f6:	6053      	str	r3, [r2, #4]
        for (int i = 0; i < Buffer_index; i++)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <FOTA_main+0x178>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3dd      	bcc.n	80010c4 <FOTA_main+0x64>
        }

       if (OFF == ESP_datas.all_firmware_have_received)
 8001108:	4b34      	ldr	r3, [pc, #208]	; (80011dc <FOTA_main+0x17c>)
 800110a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800110e:	33f0      	adds	r3, #240	; 0xf0
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10a      	bne.n	800112c <FOTA_main+0xcc>
       {
    	   ESP_datas.flash_son_adres_eki = FOTA.last_used_flash_address;
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <FOTA_main+0x174>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <FOTA_main+0x17c>)
 800111c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8001120:	33fc      	adds	r3, #252	; 0xfc
 8001122:	601a      	str	r2, [r3, #0]

           FOTA.State_of_FOTA = GET_THE_LAST_OF_DATA_FROM_SERVER;
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <FOTA_main+0x174>)
 8001126:	2203      	movs	r2, #3
 8001128:	701a      	strb	r2, [r3, #0]

           break;
 800112a:	e04e      	b.n	80011ca <FOTA_main+0x16a>
       }
       else
       {
           HAL_FLASH_Lock();
 800112c:	f000 fe94 	bl	8001e58 <HAL_FLASH_Lock>

           FOTA.State_of_FOTA = EXECUTE_THE_NEW_FIRMWARE;
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <FOTA_main+0x174>)
 8001132:	2204      	movs	r2, #4
 8001134:	701a      	strb	r2, [r3, #0]

           break;
 8001136:	e048      	b.n	80011ca <FOTA_main+0x16a>
       }
	}
    case GET_THE_LAST_OF_DATA_FROM_SERVER:
    {
    	ESP_datas.SGTD_index = 0;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <FOTA_main+0x17c>)
 800113a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800113e:	33ec      	adds	r3, #236	; 0xec
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

    	memset(ESP_datas.new_firmware_datas,0,sizeof(ESP_datas.new_firmware_datas));
 8001144:	f242 7210 	movw	r2, #10000	; 0x2710
 8001148:	2100      	movs	r1, #0
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <FOTA_main+0x180>)
 800114c:	f003 fa12 	bl	8004574 <memset>

    	memset(ESP_datas.Received_Data, 0, sizeof(ESP_datas.Received_Data));
 8001150:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001154:	2100      	movs	r1, #0
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <FOTA_main+0x184>)
 8001158:	f003 fa0c 	bl	8004574 <memset>
    	memset(ESP_datas.last_line_of_Received_Data, 0,sizeof(ESP_datas.last_line_of_Received_Data));
 800115c:	22c8      	movs	r2, #200	; 0xc8
 800115e:	2100      	movs	r1, #0
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <FOTA_main+0x188>)
 8001162:	f003 fa07 	bl	8004574 <memset>
    	memset(ESP_datas.new_firmware_datas_u32, 0,sizeof(ESP_datas.new_firmware_datas_u32));
 8001166:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800116a:	2100      	movs	r1, #0
 800116c:	481f      	ldr	r0, [pc, #124]	; (80011ec <FOTA_main+0x18c>)
 800116e:	f003 fa01 	bl	8004574 <memset>

    	HAL_UART_Receive_IT(&huart2, &ESP_datas.rx_data, 1);
 8001172:	2201      	movs	r2, #1
 8001174:	4919      	ldr	r1, [pc, #100]	; (80011dc <FOTA_main+0x17c>)
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <FOTA_main+0x190>)
 8001178:	f002 fb10 	bl	800379c <HAL_UART_Receive_IT>

    	send_command_to_server(COMMAND_TYPE_CLOSE_AT_CIPSEND_3);
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff fc61 	bl	8000a44 <send_command_to_server>

    	FOTA.State_of_FOTA = GET_THE_FIRST_DATA_FROM_SERVER;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <FOTA_main+0x174>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

      break;
 8001188:	e01f      	b.n	80011ca <FOTA_main+0x16a>
    }
    case EXECUTE_THE_NEW_FIRMWARE: /*check if there is a new firmware or not*/
    {
    	SystemInit();
 800118a:	f000 fc09 	bl	80019a0 <SystemInit>

    	pFunction Jump_To_Application = *( (pFunction*) (APPLICATION_START_ADDRESS + 4) );
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <FOTA_main+0x194>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f383 8814 	msr	CONTROL, r3

    	__set_CONTROL(0);

        SysTick->CTRL = 0; //disable SysTick
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <FOTA_main+0x198>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        HAL_TIM_Base_Stop_IT(&htim3);  //TİMER IT KAPAT
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <FOTA_main+0x19c>)
 80011a6:	f001 fe36 	bl	8002e16 <HAL_TIM_Base_Stop_IT>

        HAL_UART_AbortReceive_IT(&huart2);  //UART IT KAPAT
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <FOTA_main+0x190>)
 80011ac:	f002 fb4c 	bl	8003848 <HAL_UART_AbortReceive_IT>

        SCB->VTOR = APPLICATION_START_ADDRESS;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <FOTA_main+0x1a0>)
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <FOTA_main+0x1a4>)
 80011b4:	609a      	str	r2, [r3, #8]

        __set_MSP( *( (uint32_t*) APPLICATION_START_ADDRESS ) );
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <FOTA_main+0x1a4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f383 8808 	msr	MSP, r3

        Jump_To_Application();
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	4798      	blx	r3
    }
	} /*SWITCH*/
}
 80011c6:	e000      	b.n	80011ca <FOTA_main+0x16a>
		break;
 80011c8:	bf00      	nop
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000d740 	.word	0x2000d740
 80011d8:	2000d748 	.word	0x2000d748
 80011dc:	20000028 	.word	0x20000028
 80011e0:	20009d39 	.word	0x20009d39
 80011e4:	20000030 	.word	0x20000030
 80011e8:	20009c70 	.word	0x20009c70
 80011ec:	2000c44c 	.word	0x2000c44c
 80011f0:	2000d78c 	.word	0x2000d78c
 80011f4:	0800c004 	.word	0x0800c004
 80011f8:	e000e010 	.word	0xe000e010
 80011fc:	2000d74c 	.word	0x2000d74c
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	0800c000 	.word	0x0800c000

08001208 <initial_arrangement>:
/*********************************************************************************************************************************
 * Start connection with server
 * Listen the ESP8266
 ********************************************************************************************************************************/
void initial_arrangement()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim3);
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <initial_arrangement+0x3c>)
 800120e:	f001 fdde 	bl	8002dce <HAL_TIM_Base_Start_IT>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <initial_arrangement+0x40>)
 800121a:	f001 f93d 	bl	8002498 <HAL_GPIO_WritePin>

	  HAL_UART_Receive_IT(&huart2, &ESP_datas.rx_data, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	490a      	ldr	r1, [pc, #40]	; (800124c <initial_arrangement+0x44>)
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <initial_arrangement+0x48>)
 8001224:	f002 faba 	bl	800379c <HAL_UART_Receive_IT>

  	  send_command_to_server(COMMAND_TYPE_AT_CIPSTART);
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff fc0b 	bl	8000a44 <send_command_to_server>

	  ESP_datas.connection_status_with_server = OFF;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <initial_arrangement+0x44>)
 8001230:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8001234:	33f2      	adds	r3, #242	; 0xf2
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]

	  FOTA.State_of_FOTA = GET_THE_FIRST_DATA_FROM_SERVER; //silme
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <initial_arrangement+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000d74c 	.word	0x2000d74c
 8001248:	40020c00 	.word	0x40020c00
 800124c:	20000028 	.word	0x20000028
 8001250:	2000d78c 	.word	0x2000d78c
 8001254:	2000d740 	.word	0x2000d740

08001258 <endiannes_arrangement>:


void endiannes_arrangement(uint32_t Buffer_index)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    uint8_t  a,b,c,d;

    for (int i = 0; i < (ESP_datas.SGTD_index-2 - ESP_datas.arastop); i = i + 8)  //bufferların içindeki veriler sektörlerdeki gibi 64bitlik hale getirilip svalueinsector e kaydedilir. (SGTD_index-2 ile bufferdaki stop biti ayıklanır.)
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e08e      	b.n	8001384 <endiannes_arrangement+0x12c>
    {
        a = ((uint8_t) (convertChartoHex(&ESP_datas.new_firmware_datas[i]))     << 4) | (convertChartoHex(&ESP_datas.new_firmware_datas[i + 1]));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 800126c:	3310      	adds	r3, #16
 800126e:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <endiannes_arrangement+0x154>)
 8001270:	4413      	add	r3, r2
 8001272:	3301      	adds	r3, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f8db 	bl	8001430 <convertChartoHex>
 800127a:	4603      	mov	r3, r0
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	b25c      	sxtb	r4, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8001288:	3310      	adds	r3, #16
 800128a:	4a48      	ldr	r2, [pc, #288]	; (80013ac <endiannes_arrangement+0x154>)
 800128c:	4413      	add	r3, r2
 800128e:	3301      	adds	r3, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f8cd 	bl	8001430 <convertChartoHex>
 8001296:	4603      	mov	r3, r0
 8001298:	b25b      	sxtb	r3, r3
 800129a:	4323      	orrs	r3, r4
 800129c:	b25b      	sxtb	r3, r3
 800129e:	72fb      	strb	r3, [r7, #11]

        b = ((uint8_t) (convertChartoHex(&ESP_datas.new_firmware_datas[i + 2])) << 4) | (convertChartoHex(&ESP_datas.new_firmware_datas[i + 3]));
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3302      	adds	r3, #2
 80012a4:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 80012a8:	3310      	adds	r3, #16
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <endiannes_arrangement+0x154>)
 80012ac:	4413      	add	r3, r2
 80012ae:	3301      	adds	r3, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f8bd 	bl	8001430 <convertChartoHex>
 80012b6:	4603      	mov	r3, r0
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	b25c      	sxtb	r4, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3303      	adds	r3, #3
 80012c0:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 80012c4:	3310      	adds	r3, #16
 80012c6:	4a39      	ldr	r2, [pc, #228]	; (80013ac <endiannes_arrangement+0x154>)
 80012c8:	4413      	add	r3, r2
 80012ca:	3301      	adds	r3, #1
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f8af 	bl	8001430 <convertChartoHex>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4323      	orrs	r3, r4
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	72bb      	strb	r3, [r7, #10]

        c = ((uint8_t) (convertChartoHex(&ESP_datas.new_firmware_datas[i + 4])) << 4) | (convertChartoHex(&ESP_datas.new_firmware_datas[i + 5]));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3304      	adds	r3, #4
 80012e0:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 80012e4:	3310      	adds	r3, #16
 80012e6:	4a31      	ldr	r2, [pc, #196]	; (80013ac <endiannes_arrangement+0x154>)
 80012e8:	4413      	add	r3, r2
 80012ea:	3301      	adds	r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f89f 	bl	8001430 <convertChartoHex>
 80012f2:	4603      	mov	r3, r0
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	b25c      	sxtb	r4, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3305      	adds	r3, #5
 80012fc:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8001300:	3310      	adds	r3, #16
 8001302:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <endiannes_arrangement+0x154>)
 8001304:	4413      	add	r3, r2
 8001306:	3301      	adds	r3, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f891 	bl	8001430 <convertChartoHex>
 800130e:	4603      	mov	r3, r0
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4323      	orrs	r3, r4
 8001314:	b25b      	sxtb	r3, r3
 8001316:	727b      	strb	r3, [r7, #9]

        d = ((uint8_t) (convertChartoHex(&ESP_datas.new_firmware_datas[i + 6])) << 4) | (convertChartoHex(&ESP_datas.new_firmware_datas[i + 7]));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3306      	adds	r3, #6
 800131c:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 8001320:	3310      	adds	r3, #16
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <endiannes_arrangement+0x154>)
 8001324:	4413      	add	r3, r2
 8001326:	3301      	adds	r3, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f881 	bl	8001430 <convertChartoHex>
 800132e:	4603      	mov	r3, r0
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	b25c      	sxtb	r4, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3307      	adds	r3, #7
 8001338:	f503 431d 	add.w	r3, r3, #40192	; 0x9d00
 800133c:	3310      	adds	r3, #16
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <endiannes_arrangement+0x154>)
 8001340:	4413      	add	r3, r2
 8001342:	3301      	adds	r3, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f873 	bl	8001430 <convertChartoHex>
 800134a:	4603      	mov	r3, r0
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4323      	orrs	r3, r4
 8001350:	b25b      	sxtb	r3, r3
 8001352:	723b      	strb	r3, [r7, #8]

        ESP_datas.new_firmware_datas_u32[Buffer_index] = (((uint64_t) a << 24) | ((uint32_t) b << 16) | ((uint16_t) c << 8) | d);
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	061a      	lsls	r2, r3, #24
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	041b      	lsls	r3, r3, #16
 800135c:	4313      	orrs	r3, r2
 800135e:	7a7a      	ldrb	r2, [r7, #9]
 8001360:	0212      	lsls	r2, r2, #8
 8001362:	431a      	orrs	r2, r3
 8001364:	7a3b      	ldrb	r3, [r7, #8]
 8001366:	431a      	orrs	r2, r3
 8001368:	4910      	ldr	r1, [pc, #64]	; (80013ac <endiannes_arrangement+0x154>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8001370:	3308      	adds	r3, #8
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	605a      	str	r2, [r3, #4]

        Buffer_index++;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < (ESP_datas.SGTD_index-2 - ESP_datas.arastop); i = i + 8)  //bufferların içindeki veriler sektörlerdeki gibi 64bitlik hale getirilip svalueinsector e kaydedilir. (SGTD_index-2 ile bufferdaki stop biti ayıklanır.)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3308      	adds	r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <endiannes_arrangement+0x154>)
 8001386:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800138a:	33ec      	adds	r3, #236	; 0xec
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <endiannes_arrangement+0x154>)
 8001390:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8001394:	33e8      	adds	r3, #232	; 0xe8
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	1e9a      	subs	r2, r3, #2
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	429a      	cmp	r2, r3
 80013a0:	f63f af61 	bhi.w	8001266 <endiannes_arrangement+0xe>
    }
 }
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000028 	.word	0x20000028

080013b0 <Flash_erase>:

void Flash_erase()
{
 80013b0:	b598      	push	{r3, r4, r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	  HAL_FLASH_Unlock();
 80013b4:	f000 fd2e 	bl	8001e14 <HAL_FLASH_Unlock>
	  FLASH_Erase_Sector(FLASH_SECTOR_2,  VOLTAGE_RANGE_3);
 80013b8:	2102      	movs	r1, #2
 80013ba:	2002      	movs	r0, #2
 80013bc:	f000 fe8a 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_3,  VOLTAGE_RANGE_3);
 80013c0:	2102      	movs	r1, #2
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 fe86 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_4,  VOLTAGE_RANGE_3);
 80013c8:	2102      	movs	r1, #2
 80013ca:	2004      	movs	r0, #4
 80013cc:	f000 fe82 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_5,  VOLTAGE_RANGE_3);
 80013d0:	2102      	movs	r1, #2
 80013d2:	2005      	movs	r0, #5
 80013d4:	f000 fe7e 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_6,  VOLTAGE_RANGE_3);
 80013d8:	2102      	movs	r1, #2
 80013da:	2006      	movs	r0, #6
 80013dc:	f000 fe7a 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_7,  VOLTAGE_RANGE_3);
 80013e0:	2102      	movs	r1, #2
 80013e2:	2007      	movs	r0, #7
 80013e4:	f000 fe76 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_8,  VOLTAGE_RANGE_3);
 80013e8:	2102      	movs	r1, #2
 80013ea:	2008      	movs	r0, #8
 80013ec:	f000 fe72 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_9,  VOLTAGE_RANGE_3);
 80013f0:	2102      	movs	r1, #2
 80013f2:	2009      	movs	r0, #9
 80013f4:	f000 fe6e 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_10, VOLTAGE_RANGE_3);
 80013f8:	2102      	movs	r1, #2
 80013fa:	200a      	movs	r0, #10
 80013fc:	f000 fe6a 	bl	80020d4 <FLASH_Erase_Sector>
	  FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8001400:	2102      	movs	r1, #2
 8001402:	200b      	movs	r0, #11
 8001404:	f000 fe66 	bl	80020d4 <FLASH_Erase_Sector>

	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,0x08008000, *(uint32_t*) &ESP_datas.Firmware_version_on_server_u32); //yeni kodun versiyonunu kaydet
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <Flash_erase+0x78>)
 800140a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 800140e:	33f8      	adds	r3, #248	; 0xf8
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f04f 0400 	mov.w	r4, #0
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	4904      	ldr	r1, [pc, #16]	; (800142c <Flash_erase+0x7c>)
 800141c:	2002      	movs	r0, #2
 800141e:	f000 fca5 	bl	8001d6c <HAL_FLASH_Program>
}
 8001422:	bf00      	nop
 8001424:	bd98      	pop	{r3, r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	20000028 	.word	0x20000028
 800142c:	08008000 	.word	0x08008000

08001430 <convertChartoHex>:

uint8_t convertChartoHex(uint8_t *x)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t hexresult;
    if(*x=='0'){ hexresult = 0x0;}
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b30      	cmp	r3, #48	; 0x30
 800143e:	d101      	bne.n	8001444 <convertChartoHex+0x14>
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
    if(*x=='1'){ hexresult = 0x1;}
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b31      	cmp	r3, #49	; 0x31
 800144a:	d101      	bne.n	8001450 <convertChartoHex+0x20>
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
    if(*x=='2'){ hexresult = 0x2;}
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b32      	cmp	r3, #50	; 0x32
 8001456:	d101      	bne.n	800145c <convertChartoHex+0x2c>
 8001458:	2302      	movs	r3, #2
 800145a:	73fb      	strb	r3, [r7, #15]
    if(*x=='3'){ hexresult = 0x3;}
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b33      	cmp	r3, #51	; 0x33
 8001462:	d101      	bne.n	8001468 <convertChartoHex+0x38>
 8001464:	2303      	movs	r3, #3
 8001466:	73fb      	strb	r3, [r7, #15]
    if(*x=='4'){ hexresult = 0x4;}
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b34      	cmp	r3, #52	; 0x34
 800146e:	d101      	bne.n	8001474 <convertChartoHex+0x44>
 8001470:	2304      	movs	r3, #4
 8001472:	73fb      	strb	r3, [r7, #15]
    if(*x=='5'){ hexresult = 0x5;}
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b35      	cmp	r3, #53	; 0x35
 800147a:	d101      	bne.n	8001480 <convertChartoHex+0x50>
 800147c:	2305      	movs	r3, #5
 800147e:	73fb      	strb	r3, [r7, #15]
    if(*x=='6'){ hexresult = 0x6;}
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b36      	cmp	r3, #54	; 0x36
 8001486:	d101      	bne.n	800148c <convertChartoHex+0x5c>
 8001488:	2306      	movs	r3, #6
 800148a:	73fb      	strb	r3, [r7, #15]
    if(*x=='7'){ hexresult = 0x7;}
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b37      	cmp	r3, #55	; 0x37
 8001492:	d101      	bne.n	8001498 <convertChartoHex+0x68>
 8001494:	2307      	movs	r3, #7
 8001496:	73fb      	strb	r3, [r7, #15]
    if(*x=='8'){ hexresult = 0x8;}
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b38      	cmp	r3, #56	; 0x38
 800149e:	d101      	bne.n	80014a4 <convertChartoHex+0x74>
 80014a0:	2308      	movs	r3, #8
 80014a2:	73fb      	strb	r3, [r7, #15]
    if(*x=='9'){ hexresult = 0x9;}
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b39      	cmp	r3, #57	; 0x39
 80014aa:	d101      	bne.n	80014b0 <convertChartoHex+0x80>
 80014ac:	2309      	movs	r3, #9
 80014ae:	73fb      	strb	r3, [r7, #15]
    if(*x=='A'){ hexresult = 0xA;}
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b41      	cmp	r3, #65	; 0x41
 80014b6:	d101      	bne.n	80014bc <convertChartoHex+0x8c>
 80014b8:	230a      	movs	r3, #10
 80014ba:	73fb      	strb	r3, [r7, #15]
    if(*x=='B'){ hexresult = 0xB;}
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b42      	cmp	r3, #66	; 0x42
 80014c2:	d101      	bne.n	80014c8 <convertChartoHex+0x98>
 80014c4:	230b      	movs	r3, #11
 80014c6:	73fb      	strb	r3, [r7, #15]
    if(*x=='C'){ hexresult = 0xC;}
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b43      	cmp	r3, #67	; 0x43
 80014ce:	d101      	bne.n	80014d4 <convertChartoHex+0xa4>
 80014d0:	230c      	movs	r3, #12
 80014d2:	73fb      	strb	r3, [r7, #15]
    if(*x=='D'){ hexresult = 0xD;}
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b44      	cmp	r3, #68	; 0x44
 80014da:	d101      	bne.n	80014e0 <convertChartoHex+0xb0>
 80014dc:	230d      	movs	r3, #13
 80014de:	73fb      	strb	r3, [r7, #15]
    if(*x=='E'){ hexresult = 0xE;}
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b45      	cmp	r3, #69	; 0x45
 80014e6:	d101      	bne.n	80014ec <convertChartoHex+0xbc>
 80014e8:	230e      	movs	r3, #14
 80014ea:	73fb      	strb	r3, [r7, #15]
    if(*x=='F'){ hexresult = 0xF;}
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b46      	cmp	r3, #70	; 0x46
 80014f2:	d101      	bne.n	80014f8 <convertChartoHex+0xc8>
 80014f4:	230f      	movs	r3, #15
 80014f6:	73fb      	strb	r3, [r7, #15]

    return hexresult;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fa89 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f80b 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 f8df 	bl	80016d4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001516:	f000 f865 	bl	80015e4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800151a:	f000 f8b1 	bl	8001680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  initial_arrangement();
 800151e:	f7ff fe73 	bl	8001208 <initial_arrangement>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FOTA_main();
 8001522:	f7ff fd9d 	bl	8001060 <FOTA_main>
 8001526:	e7fc      	b.n	8001522 <main+0x1c>

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	; 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2230      	movs	r2, #48	; 0x30
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f81c 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <SystemClock_Config+0xb4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a21      	ldr	r2, [pc, #132]	; (80015dc <SystemClock_Config+0xb4>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <SystemClock_Config+0xb4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <SystemClock_Config+0xb8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <SystemClock_Config+0xb8>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <SystemClock_Config+0xb8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158c:	2310      	movs	r3, #16
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f000 ffb1 	bl	8002500 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015a4:	f000 f912 	bl	80017cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fa0c 	bl	80029e0 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ce:	f000 f8fd 	bl	80017cc <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	; 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_TIM3_Init+0x94>)
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <MX_TIM3_Init+0x98>)
 8001604:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_TIM3_Init+0x94>)
 8001608:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800160c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM3_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_TIM3_Init+0x94>)
 8001616:	f242 7210 	movw	r2, #10000	; 0x2710
 800161a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_TIM3_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM3_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <MX_TIM3_Init+0x94>)
 800162a:	f001 fba5 	bl	8002d78 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001634:	f000 f8ca 	bl	80017cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_TIM3_Init+0x94>)
 8001646:	f001 fd19 	bl	800307c <HAL_TIM_ConfigClockSource>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001650:	f000 f8bc 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_TIM3_Init+0x94>)
 8001662:	f001 ff25 	bl	80034b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800166c:	f000 f8ae 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000d74c 	.word	0x2000d74c
 800167c:	40000400 	.word	0x40000400

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f001 ff8a 	bl	80035d0 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 f883 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000d78c 	.word	0x2000d78c
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_GPIO_Init+0x80>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <MX_GPIO_Init+0x80>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_GPIO_Init+0x80>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_GPIO_Init+0x80>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a11      	ldr	r2, [pc, #68]	; (8001754 <MX_GPIO_Init+0x80>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_GPIO_Init+0x80>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <MX_GPIO_Init+0x84>)
 800172a:	f000 feb5 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800172e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_GPIO_Init+0x84>)
 8001748:	f000 fd0c 	bl	8002164 <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40020c00 	.word	0x40020c00

0800175c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	uint32_t veri_sector3_adres0 = *(uint32_t*)0x0800C000 ;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]

	if( (ESP_datas.connection_status_with_server == OFF) &&
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800176c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8001770:	33f2      	adds	r3, #242	; 0xf2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10b      	bne.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x34>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177e:	d007      	beq.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x34>
		(veri_sector3_adres0 != 0xFFFFFFFF )                )//VERİ VAR server kapalı
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001786:	f000 fea0 	bl	80024ca <HAL_GPIO_TogglePin>

		FOTA.State_of_FOTA = EXECUTE_THE_NEW_FIRMWARE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800178c:	2204      	movs	r2, #4
 800178e:	701a      	strb	r2, [r3, #0]
	}
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800c000 	.word	0x0800c000
 800179c:	20000028 	.word	0x20000028
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	2000d740 	.word	0x2000d740

080017a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_UART_RxCpltCallback+0x20>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_UART_RxCpltCallback+0x16>
	{
		RX_Callback();
 80017ba:	f7fe fe85 	bl	80004c8 <RX_Callback>
	}
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004400 	.word	0x40004400

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_TIM_Base_MspInit+0x48>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d115      	bne.n	800186a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_TIM_Base_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	201d      	movs	r0, #29
 8001860:	f000 fa2b 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001864:	201d      	movs	r0, #29
 8001866:	f000 fa44 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40000400 	.word	0x40000400
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_UART_MspInit+0x94>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d133      	bne.n	8001906 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_UART_MspInit+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e6:	2307      	movs	r3, #7
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_UART_MspInit+0x9c>)
 80018f2:	f000 fc37 	bl	8002164 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2026      	movs	r0, #38	; 0x26
 80018fc:	f000 f9dd 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001900:	2026      	movs	r0, #38	; 0x26
 8001902:	f000 f9f6 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40004400 	.word	0x40004400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f8a8 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM3_IRQHandler+0x10>)
 800197e:	f001 fa75 	bl	8002e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000d74c 	.word	0x2000d74c

0800198c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <USART2_IRQHandler+0x10>)
 8001992:	f001 ffb1 	bl	80038f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000d78c 	.word	0x2000d78c

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SystemInit+0x28>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <SystemInit+0x28>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SystemInit+0x28>)
 80019b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ba:	609a      	str	r2, [r3, #8]
#endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019d2:	e003      	b.n	80019dc <LoopCopyDataInit>

080019d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019da:	3104      	adds	r1, #4

080019dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e4:	d3f6      	bcc.n	80019d4 <CopyDataInit>
  ldr  r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019e8:	e002      	b.n	80019f0 <LoopFillZerobss>

080019ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ec:	f842 3b04 	str.w	r3, [r2], #4

080019f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f4:	d3f9      	bcc.n	80019ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019f6:	f7ff ffd3 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 fd97 	bl	800452c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fd82 	bl	8001506 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a08:	08004618 	.word	0x08004618
  ldr  r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a10:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001a14:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001a18:	2000d7f0 	.word	0x2000d7f0

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f92b 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fec2 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f943 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f90b 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000d7cc 	.word	0x2000d7cc

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000d7cc 	.word	0x2000d7cc

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e00c      	b.n	8001d5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2205      	movs	r2, #5
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_FLASH_Program+0xa0>)
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_FLASH_Program+0x1e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e03b      	b.n	8001e02 <HAL_FLASH_Program+0x96>
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_FLASH_Program+0xa0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d94:	f000 f870 	bl	8001e78 <FLASH_WaitForLastOperation>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12b      	bne.n	8001dfa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001da8:	783b      	ldrb	r3, [r7, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f000 f919 	bl	8001fe4 <FLASH_Program_Byte>
 8001db2:	e016      	b.n	8001de2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001dba:	883b      	ldrh	r3, [r7, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68b8      	ldr	r0, [r7, #8]
 8001dc0:	f000 f8ec 	bl	8001f9c <FLASH_Program_HalfWord>
 8001dc4:	e00d      	b.n	8001de2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d105      	bne.n	8001dd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	f000 f8c1 	bl	8001f58 <FLASH_Program_Word>
 8001dd6:	e004      	b.n	8001de2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f000 f88b 	bl	8001ef8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de6:	f000 f847 	bl	8001e78 <FLASH_WaitForLastOperation>
 8001dea:	4603      	mov	r3, r0
 8001dec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_FLASH_Program+0xa4>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_FLASH_Program+0xa4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_FLASH_Program+0xa0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000d7d0 	.word	0x2000d7d0
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_FLASH_Unlock+0x38>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da0b      	bge.n	8001e3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_FLASH_Unlock+0x38>)
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_FLASH_Unlock+0x3c>)
 8001e2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_FLASH_Unlock+0x38>)
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_FLASH_Unlock+0x40>)
 8001e30:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_FLASH_Unlock+0x38>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da01      	bge.n	8001e3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	45670123 	.word	0x45670123
 8001e54:	cdef89ab 	.word	0xcdef89ab

08001e58 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_FLASH_Lock+0x1c>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_FLASH_Lock+0x1c>)
 8001e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e66:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <FLASH_WaitForLastOperation+0x78>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8a:	f7ff fe2f 	bl	8001aec <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e90:	e010      	b.n	8001eb4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d00c      	beq.n	8001eb4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <FLASH_WaitForLastOperation+0x38>
 8001ea0:	f7ff fe24 	bl	8001aec <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d201      	bcs.n	8001eb4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e019      	b.n	8001ee8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <FLASH_WaitForLastOperation+0x7c>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e8      	bne.n	8001e92 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <FLASH_WaitForLastOperation+0x7c>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <FLASH_WaitForLastOperation+0x7c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <FLASH_WaitForLastOperation+0x7c>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ede:	f000 f8a3 	bl	8002028 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
  
}  
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000d7d0 	.word	0x2000d7d0
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ef8:	b490      	push	{r4, r7}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <FLASH_Program_DoubleWord+0x5c>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001f2e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	f04f 0400 	mov.w	r4, #0
 8001f3e:	0013      	movs	r3, r2
 8001f40:	2400      	movs	r4, #0
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	3204      	adds	r2, #4
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc90      	pop	{r4, r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <FLASH_Program_Word+0x40>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <FLASH_Program_HalfWord+0x44>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	801a      	strh	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <FLASH_Program_Byte+0x40>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <FLASH_Program_Byte+0x40>)
 8001ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <FLASH_Program_Byte+0x40>)
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <FLASH_Program_Byte+0x40>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <FLASH_Program_Byte+0x40>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <FLASH_Program_Byte+0x40>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	701a      	strb	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 8002042:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 8002046:	2210      	movs	r2, #16
 8002048:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 8002060:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 8002064:	2220      	movs	r2, #32
 8002066:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 800207e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 800209c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f043 0320 	orr.w	r3, r3, #32
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <FLASH_SetErrorCode+0xa8>)
 80020ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <FLASH_SetErrorCode+0xa4>)
 80020be:	2202      	movs	r2, #2
 80020c0:	60da      	str	r2, [r3, #12]
  }
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40023c00 	.word	0x40023c00
 80020d0:	2000d7d0 	.word	0x2000d7d0

080020d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e010      	b.n	8002112 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d103      	bne.n	80020fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e009      	b.n	8002112 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d103      	bne.n	800210c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e002      	b.n	8002112 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800210c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002110:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	490f      	ldr	r1, [pc, #60]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002130:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4313      	orrs	r3, r2
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <FLASH_Erase_Sector+0x8c>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6113      	str	r3, [r2, #16]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e16b      	b.n	8002458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 815a 	bne.w	8002452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d00b      	beq.n	80021be <HAL_GPIO_Init+0x5a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b2:	2b11      	cmp	r3, #17
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0xfc>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b12      	cmp	r3, #18
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b4 	beq.w	8002452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_GPIO_Init+0x308>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_GPIO_Init+0x308>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_GPIO_Init+0x308>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_GPIO_Init+0x30c>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x310>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x314>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x318>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4e      	ldr	r2, [pc, #312]	; (8002480 <HAL_GPIO_Init+0x31c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_GPIO_Init+0x320>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x324>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_GPIO_Init+0x328>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_GPIO_Init+0x32c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x20a>
 800236a:	2307      	movs	r3, #7
 800236c:	e00e      	b.n	800238c <HAL_GPIO_Init+0x228>
 800236e:	2308      	movs	r3, #8
 8002370:	e00c      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002372:	2306      	movs	r3, #6
 8002374:	e00a      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002376:	2305      	movs	r3, #5
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237a:	2304      	movs	r3, #4
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x228>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x228>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x228>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_GPIO_Init+0x30c>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_GPIO_Init+0x330>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ce:	4a31      	ldr	r2, [pc, #196]	; (8002494 <HAL_GPIO_Init+0x330>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_GPIO_Init+0x330>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <HAL_GPIO_Init+0x330>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_GPIO_Init+0x330>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_GPIO_Init+0x330>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f ae90 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	3724      	adds	r7, #36	; 0x24
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40013c00 	.word	0x40013c00

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	401a      	ands	r2, r3
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d104      	bne.n	80024ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	041a      	lsls	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e25b      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d075      	beq.n	800260a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	4ba3      	ldr	r3, [pc, #652]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d112      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b99      	ldr	r3, [pc, #612]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05b      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d157      	bne.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e236      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x74>
 8002566:	4b91      	ldr	r3, [pc, #580]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a90      	ldr	r2, [pc, #576]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a8a      	ldr	r2, [pc, #552]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a87      	ldr	r2, [pc, #540]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002598:	4b84      	ldr	r3, [pc, #528]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a83      	ldr	r2, [pc, #524]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a80      	ldr	r2, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fa98 	bl	8001aec <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fa94 	bl	8001aec <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1fb      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fa84 	bl	8001aec <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fa80 	bl	8001aec <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1e7      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1bb      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4952      	ldr	r1, [pc, #328]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_OscConfig+0x2b0>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7ff fa39 	bl	8001aec <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff fa35 	bl	8001aec <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e19c      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4940      	ldr	r1, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_OscConfig+0x2b0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff fa18 	bl	8001aec <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fa14 	bl	8001aec <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e17b      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d030      	beq.n	800274c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x2b4>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7ff f9f8 	bl	8001aec <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff f9f4 	bl	8001aec <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e15b      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x200>
 800271e:	e015      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x2b4>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff f9e1 	bl	8001aec <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272e:	f7ff f9dd 	bl	8001aec <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e144      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a0 	beq.w	800289a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d121      	bne.n	80027da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7ff f9a3 	bl	8001aec <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e011      	b.n	80027ce <HAL_RCC_OscConfig+0x2ce>
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	42470000 	.word	0x42470000
 80027b4:	42470e80 	.word	0x42470e80
 80027b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7ff f996 	bl	8001aec <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0fd      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
 80027e2:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a7c      	ldr	r2, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x32a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x312>
 80027f8:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a76      	ldr	r2, [pc, #472]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	4b74      	ldr	r3, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a73      	ldr	r2, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x32a>
 8002812:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a70      	ldr	r2, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f95b 	bl	8001aec <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff f957 	bl	8001aec <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0bc      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x33a>
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff f945 	bl	8001aec <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff f941 	bl	8001aec <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0a6      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a51      	ldr	r2, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8092 	beq.w	80029c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d05c      	beq.n	800296a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d141      	bne.n	800293c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7ff f915 	bl	8001aec <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff f911 	bl	8001aec <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e078      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	019b      	lsls	r3, r3, #6
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	3b01      	subs	r3, #1
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	4933      	ldr	r1, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290e:	4b33      	ldr	r3, [pc, #204]	; (80029dc <HAL_RCC_OscConfig+0x4dc>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f8ea 	bl	8001aec <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f8e6 	bl	8001aec <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04d      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x41c>
 800293a:	e045      	b.n	80029c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x4dc>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff f8d3 	bl	8001aec <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff f8cf 	bl	8001aec <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e036      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x44a>
 8002968:	e02e      	b.n	80029c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e029      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_RCC_OscConfig+0x4d8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	429a      	cmp	r2, r3
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d115      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40007000 	.word	0x40007000
 80029d8:	40023800 	.word	0x40023800
 80029dc:	42470060 	.word	0x42470060

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cc      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d90c      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e067      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4934      	ldr	r1, [pc, #208]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff f80c 	bl	8001aec <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff f808 	bl	8001aec <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e04f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	5cd3      	ldrb	r3, [r2, r3]
 8002b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe ff6c 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	080045f0 	.word	0x080045f0
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d007      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x32>
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x38>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 808d 	bne.w	8002cf2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002bda:	60bb      	str	r3, [r7, #8]
       break;
 8002bdc:	e08c      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002be0:	60bb      	str	r3, [r7, #8]
      break;
 8002be2:	e089      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be4:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d023      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	ea03 0501 	and.w	r5, r3, r1
 8002c10:	ea04 0602 	and.w	r6, r4, r2
 8002c14:	4a3d      	ldr	r2, [pc, #244]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c16:	fb02 f106 	mul.w	r1, r2, r6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	fb02 f205 	mul.w	r2, r2, r5
 8002c20:	440a      	add	r2, r1
 8002c22:	493a      	ldr	r1, [pc, #232]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c24:	fba5 0101 	umull	r0, r1, r5, r1
 8002c28:	1853      	adds	r3, r2, r1
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f04f 0400 	mov.w	r4, #0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4623      	mov	r3, r4
 8002c36:	f7fd fac7 	bl	80001c8 <__aeabi_uldivmod>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e049      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	ea03 0501 	and.w	r5, r3, r1
 8002c58:	ea04 0602 	and.w	r6, r4, r2
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4632      	mov	r2, r6
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	0154      	lsls	r4, r2, #5
 8002c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c6e:	014b      	lsls	r3, r1, #5
 8002c70:	4619      	mov	r1, r3
 8002c72:	4622      	mov	r2, r4
 8002c74:	1b49      	subs	r1, r1, r5
 8002c76:	eb62 0206 	sbc.w	r2, r2, r6
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f04f 0400 	mov.w	r4, #0
 8002c82:	0194      	lsls	r4, r2, #6
 8002c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c88:	018b      	lsls	r3, r1, #6
 8002c8a:	1a5b      	subs	r3, r3, r1
 8002c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c9e:	00d9      	lsls	r1, r3, #3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	195b      	adds	r3, r3, r5
 8002ca6:	eb44 0406 	adc.w	r4, r4, r6
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	02a2      	lsls	r2, r4, #10
 8002cb4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cb8:	0299      	lsls	r1, r3, #10
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	f7fd fa7c 	bl	80001c8 <__aeabi_uldivmod>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	60bb      	str	r3, [r7, #8]
      break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4601      	mov	r1, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	08004600 	.word	0x08004600

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4601      	mov	r1, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08004600 	.word	0x08004600

08002d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e01d      	b.n	8002dc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe fd44 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fa40 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d007      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_TIM_Base_Stop_IT+0x48>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	f240 4344 	movw	r3, #1092	; 0x444
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_TIM_Base_Stop_IT+0x48>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0202 	mvn.w	r2, #2
 8002e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9a5 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f997 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9a8 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0204 	mvn.w	r2, #4
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f97b 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f96d 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f97e 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0208 	mvn.w	r2, #8
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2204      	movs	r2, #4
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f951 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f943 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f954 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0210 	mvn.w	r2, #16
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2208      	movs	r2, #8
 8002f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f927 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f919 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f92a 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0201 	mvn.w	r2, #1
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fbb6 	bl	800175c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fad0 	bl	80035bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8ef 	bl	8003226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b20      	cmp	r3, #32
 8003054:	d10e      	bne.n	8003074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b20      	cmp	r3, #32
 8003062:	d107      	bne.n	8003074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0220 	mvn.w	r2, #32
 800306c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa9a 	bl	80035a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x18>
 8003090:	2302      	movs	r3, #2
 8003092:	e0a6      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x166>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d067      	beq.n	800319c <HAL_TIM_ConfigClockSource+0x120>
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d80b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x6c>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d073      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x140>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d802      	bhi.n	80030de <HAL_TIM_ConfigClockSource+0x62>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d06f      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030dc:	e078      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d06c      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x140>
 80030e2:	2b30      	cmp	r3, #48	; 0x30
 80030e4:	d06a      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030e6:	e073      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d00d      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x8c>
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d804      	bhi.n	80030fa <HAL_TIM_ConfigClockSource+0x7e>
 80030f0:	2b50      	cmp	r3, #80	; 0x50
 80030f2:	d033      	beq.n	800315c <HAL_TIM_ConfigClockSource+0xe0>
 80030f4:	2b60      	cmp	r3, #96	; 0x60
 80030f6:	d041      	beq.n	800317c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030f8:	e06a      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d066      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x152>
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d017      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003106:	e063      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f000 f9aa 	bl	8003470 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800312a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
      break;
 8003134:	e04c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f000 f993 	bl	8003470 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003158:	609a      	str	r2, [r3, #8]
      break;
 800315a:	e039      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	461a      	mov	r2, r3
 800316a:	f000 f907 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2150      	movs	r1, #80	; 0x50
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f960 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 800317a:	e029      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	461a      	mov	r2, r3
 800318a:	f000 f926 	bl	80033da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2160      	movs	r1, #96	; 0x60
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f950 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 800319a:	e019      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f8e7 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f940 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 80031ba:	e009      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 f937 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 80031cc:	e000      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a40      	ldr	r2, [pc, #256]	; (8003350 <TIM_Base_SetConfig+0x114>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d00f      	beq.n	800327c <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3d      	ldr	r2, [pc, #244]	; (8003354 <TIM_Base_SetConfig+0x118>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00b      	beq.n	800327c <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <TIM_Base_SetConfig+0x11c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d007      	beq.n	800327c <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3b      	ldr	r2, [pc, #236]	; (800335c <TIM_Base_SetConfig+0x120>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d003      	beq.n	800327c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3a      	ldr	r2, [pc, #232]	; (8003360 <TIM_Base_SetConfig+0x124>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d108      	bne.n	800328e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <TIM_Base_SetConfig+0x114>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02b      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d027      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <TIM_Base_SetConfig+0x118>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d023      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <TIM_Base_SetConfig+0x11c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <TIM_Base_SetConfig+0x120>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01b      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a29      	ldr	r2, [pc, #164]	; (8003360 <TIM_Base_SetConfig+0x124>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d017      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a28      	ldr	r2, [pc, #160]	; (8003364 <TIM_Base_SetConfig+0x128>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a27      	ldr	r2, [pc, #156]	; (8003368 <TIM_Base_SetConfig+0x12c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a26      	ldr	r2, [pc, #152]	; (800336c <TIM_Base_SetConfig+0x130>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <TIM_Base_SetConfig+0x134>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a24      	ldr	r2, [pc, #144]	; (8003374 <TIM_Base_SetConfig+0x138>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a23      	ldr	r2, [pc, #140]	; (8003378 <TIM_Base_SetConfig+0x13c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <TIM_Base_SetConfig+0x114>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0xf8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <TIM_Base_SetConfig+0x124>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d103      	bne.n	800333c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40010400 	.word	0x40010400
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800
 8003370:	40001800 	.word	0x40001800
 8003374:	40001c00 	.word	0x40001c00
 8003378:	40002000 	.word	0x40002000

0800337c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 030a 	bic.w	r3, r3, #10
 80033b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f023 0210 	bic.w	r2, r3, #16
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	031b      	lsls	r3, r3, #12
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	f043 0307 	orr.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	431a      	orrs	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e05a      	b.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d01d      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10c      	bne.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4313      	orrs	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40010000 	.word	0x40010000
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800
 8003598:	40000c00 	.word	0x40000c00
 800359c:	40010400 	.word	0x40010400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40001800 	.word	0x40001800

080035a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e03f      	b.n	8003662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe f940 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fc0d 	bl	8003e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b088      	sub	sp, #32
 800366e:	af02      	add	r7, sp, #8
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 8083 	bne.w	8003792 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_Transmit+0x2e>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e07b      	b.n	8003794 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Transmit+0x40>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e074      	b.n	8003794 <HAL_UART_Transmit+0x12a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2221      	movs	r2, #33	; 0x21
 80036bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fa14 	bl	8001aec <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036da:	e042      	b.n	8003762 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d122      	bne.n	800373a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa18 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e042      	b.n	8003794 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003720:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3302      	adds	r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	e017      	b.n	8003762 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	e013      	b.n	8003762 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f9f5 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e01f      	b.n	8003794 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	60ba      	str	r2, [r7, #8]
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1b7      	bne.n	80036dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	2140      	movs	r1, #64	; 0x40
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f9dc 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e006      	b.n	8003794 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d140      	bne.n	8003838 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_UART_Receive_IT+0x26>
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e039      	b.n	800383a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_UART_Receive_IT+0x38>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e032      	b.n	800383a <HAL_UART_Receive_IT+0x9e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2222      	movs	r2, #34	; 0x22
 80037f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003812:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800385e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d12a      	bne.n	80038d4 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_UART_AbortReceive_IT+0xac>)
 800389c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fa3f 	bl	8001d26 <HAL_DMA_Abort_IT>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01c      	beq.n	80038e8 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038b8:	4610      	mov	r0, r2
 80038ba:	4798      	blx	r3
 80038bc:	e014      	b.n	80038e8 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f927 	bl	8003b20 <HAL_UART_AbortReceiveCpltCallback>
 80038d2:	e009      	b.n	80038e8 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f91c 	bl	8003b20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	08003c2d 	.word	0x08003c2d

080038f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x52>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9f5 	bl	8003d32 <UART_Receive_IT>
      return;
 8003948:	e0d1      	b.n	8003aee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80b0 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x1ba>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_UART_IRQHandler+0x70>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80a5 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_UART_IRQHandler+0x90>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_UART_IRQHandler+0xb0>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f043 0202 	orr.w	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0xd0>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f043 0204 	orr.w	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00f      	beq.n	80039f2 <HAL_UART_IRQHandler+0xfa>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <HAL_UART_IRQHandler+0xee>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d078      	beq.n	8003aec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_UART_IRQHandler+0x11c>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f98f 	bl	8003d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_UART_IRQHandler+0x144>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d031      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8c3 	bl	8003bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d123      	bne.n	8003a98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <HAL_UART_IRQHandler+0x1fc>)
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe f956 	bl	8001d26 <HAL_DMA_Abort_IT>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8e:	e00e      	b.n	8003aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f83b 	bl	8003b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a96:	e00a      	b.n	8003aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f837 	bl	8003b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	e006      	b.n	8003aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f833 	bl	8003b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003aac:	e01e      	b.n	8003aec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	bf00      	nop
    return;
 8003ab0:	e01c      	b.n	8003aec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_UART_IRQHandler+0x1d6>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8c5 	bl	8003c56 <UART_Transmit_IT>
    return;
 8003acc:	e00f      	b.n	8003aee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_UART_IRQHandler+0x1f6>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f90d 	bl	8003d02 <UART_EndTransmit_IT>
    return;
 8003ae8:	bf00      	nop
 8003aea:	e000      	b.n	8003aee <HAL_UART_IRQHandler+0x1f6>
    return;
 8003aec:	bf00      	nop
  }
}
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	08003c05 	.word	0x08003c05

08003af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b44:	e02c      	b.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d028      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b54:	f7fd ffca 	bl	8001aec <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d21d      	bcs.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e00f      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d0c3      	beq.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ff74 	bl	8003b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff ff69 	bl	8003b20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b21      	cmp	r3, #33	; 0x21
 8003c68:	d144      	bne.n	8003cf4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d11a      	bne.n	8003caa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c88:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	e00e      	b.n	8003cbc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e008      	b.n	8003cbc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6211      	str	r1, [r2, #32]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fee8 	bl	8003af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	; 0x22
 8003d44:	d171      	bne.n	8003e2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d123      	bne.n	8003d98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10e      	bne.n	8003d7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7a:	e029      	b.n	8003dd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
 8003d96:	e01b      	b.n	8003dd0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6858      	ldr	r0, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	1c59      	adds	r1, r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6291      	str	r1, [r2, #40]	; 0x28
 8003db0:	b2c2      	uxtb	r2, r0
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e00c      	b.n	8003dd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	1c58      	adds	r0, r3, #1
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6288      	str	r0, [r1, #40]	; 0x28
 8003dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d120      	bne.n	8003e26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0220 	bic.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fd fcc3 	bl	80017a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e002      	b.n	8003e2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e76:	f023 030c 	bic.w	r3, r3, #12
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	f040 818b 	bne.w	80041bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4ac1      	ldr	r2, [pc, #772]	; (80041b0 <UART_SetConfig+0x37c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d005      	beq.n	8003ebc <UART_SetConfig+0x88>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4abf      	ldr	r2, [pc, #764]	; (80041b4 <UART_SetConfig+0x380>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f040 80bd 	bne.w	8004036 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7fe ff48 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	f04f 0600 	mov.w	r6, #0
 8003eca:	46a8      	mov	r8, r5
 8003ecc:	46b1      	mov	r9, r6
 8003ece:	eb18 0308 	adds.w	r3, r8, r8
 8003ed2:	eb49 0409 	adc.w	r4, r9, r9
 8003ed6:	4698      	mov	r8, r3
 8003ed8:	46a1      	mov	r9, r4
 8003eda:	eb18 0805 	adds.w	r8, r8, r5
 8003ede:	eb49 0906 	adc.w	r9, r9, r6
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ef2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef6:	4688      	mov	r8, r1
 8003ef8:	4691      	mov	r9, r2
 8003efa:	eb18 0005 	adds.w	r0, r8, r5
 8003efe:	eb49 0106 	adc.w	r1, r9, r6
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	461d      	mov	r5, r3
 8003f08:	f04f 0600 	mov.w	r6, #0
 8003f0c:	196b      	adds	r3, r5, r5
 8003f0e:	eb46 0406 	adc.w	r4, r6, r6
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	f7fc f957 	bl	80001c8 <__aeabi_uldivmod>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4ba5      	ldr	r3, [pc, #660]	; (80041b8 <UART_SetConfig+0x384>)
 8003f22:	fba3 2302 	umull	r2, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	461d      	mov	r5, r3
 8003f30:	f04f 0600 	mov.w	r6, #0
 8003f34:	46a9      	mov	r9, r5
 8003f36:	46b2      	mov	sl, r6
 8003f38:	eb19 0309 	adds.w	r3, r9, r9
 8003f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f40:	4699      	mov	r9, r3
 8003f42:	46a2      	mov	sl, r4
 8003f44:	eb19 0905 	adds.w	r9, r9, r5
 8003f48:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f60:	4689      	mov	r9, r1
 8003f62:	4692      	mov	sl, r2
 8003f64:	eb19 0005 	adds.w	r0, r9, r5
 8003f68:	eb4a 0106 	adc.w	r1, sl, r6
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	461d      	mov	r5, r3
 8003f72:	f04f 0600 	mov.w	r6, #0
 8003f76:	196b      	adds	r3, r5, r5
 8003f78:	eb46 0406 	adc.w	r4, r6, r6
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	f7fc f922 	bl	80001c8 <__aeabi_uldivmod>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <UART_SetConfig+0x384>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	; 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	3332      	adds	r3, #50	; 0x32
 8003f9e:	4a86      	ldr	r2, [pc, #536]	; (80041b8 <UART_SetConfig+0x384>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fac:	4498      	add	r8, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	f04f 0600 	mov.w	r6, #0
 8003fb6:	46a9      	mov	r9, r5
 8003fb8:	46b2      	mov	sl, r6
 8003fba:	eb19 0309 	adds.w	r3, r9, r9
 8003fbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc2:	4699      	mov	r9, r3
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	eb19 0905 	adds.w	r9, r9, r5
 8003fca:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe2:	4689      	mov	r9, r1
 8003fe4:	4692      	mov	sl, r2
 8003fe6:	eb19 0005 	adds.w	r0, r9, r5
 8003fea:	eb4a 0106 	adc.w	r1, sl, r6
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	f04f 0600 	mov.w	r6, #0
 8003ff8:	196b      	adds	r3, r5, r5
 8003ffa:	eb46 0406 	adc.w	r4, r6, r6
 8003ffe:	461a      	mov	r2, r3
 8004000:	4623      	mov	r3, r4
 8004002:	f7fc f8e1 	bl	80001c8 <__aeabi_uldivmod>
 8004006:	4603      	mov	r3, r0
 8004008:	460c      	mov	r4, r1
 800400a:	461a      	mov	r2, r3
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <UART_SetConfig+0x384>)
 800400e:	fba3 1302 	umull	r1, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2164      	movs	r1, #100	; 0x64
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	3332      	adds	r3, #50	; 0x32
 8004020:	4a65      	ldr	r2, [pc, #404]	; (80041b8 <UART_SetConfig+0x384>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 0207 	and.w	r2, r3, #7
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4442      	add	r2, r8
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e26f      	b.n	8004516 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004036:	f7fe fe77 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 800403a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	461d      	mov	r5, r3
 8004040:	f04f 0600 	mov.w	r6, #0
 8004044:	46a8      	mov	r8, r5
 8004046:	46b1      	mov	r9, r6
 8004048:	eb18 0308 	adds.w	r3, r8, r8
 800404c:	eb49 0409 	adc.w	r4, r9, r9
 8004050:	4698      	mov	r8, r3
 8004052:	46a1      	mov	r9, r4
 8004054:	eb18 0805 	adds.w	r8, r8, r5
 8004058:	eb49 0906 	adc.w	r9, r9, r6
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004068:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800406c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004070:	4688      	mov	r8, r1
 8004072:	4691      	mov	r9, r2
 8004074:	eb18 0005 	adds.w	r0, r8, r5
 8004078:	eb49 0106 	adc.w	r1, r9, r6
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	461d      	mov	r5, r3
 8004082:	f04f 0600 	mov.w	r6, #0
 8004086:	196b      	adds	r3, r5, r5
 8004088:	eb46 0406 	adc.w	r4, r6, r6
 800408c:	461a      	mov	r2, r3
 800408e:	4623      	mov	r3, r4
 8004090:	f7fc f89a 	bl	80001c8 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <UART_SetConfig+0x384>)
 800409c:	fba3 2302 	umull	r2, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	461d      	mov	r5, r3
 80040aa:	f04f 0600 	mov.w	r6, #0
 80040ae:	46a9      	mov	r9, r5
 80040b0:	46b2      	mov	sl, r6
 80040b2:	eb19 0309 	adds.w	r3, r9, r9
 80040b6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ba:	4699      	mov	r9, r3
 80040bc:	46a2      	mov	sl, r4
 80040be:	eb19 0905 	adds.w	r9, r9, r5
 80040c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040da:	4689      	mov	r9, r1
 80040dc:	4692      	mov	sl, r2
 80040de:	eb19 0005 	adds.w	r0, r9, r5
 80040e2:	eb4a 0106 	adc.w	r1, sl, r6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	461d      	mov	r5, r3
 80040ec:	f04f 0600 	mov.w	r6, #0
 80040f0:	196b      	adds	r3, r5, r5
 80040f2:	eb46 0406 	adc.w	r4, r6, r6
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7fc f865 	bl	80001c8 <__aeabi_uldivmod>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	461a      	mov	r2, r3
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <UART_SetConfig+0x384>)
 8004106:	fba3 1302 	umull	r1, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2164      	movs	r1, #100	; 0x64
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <UART_SetConfig+0x384>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004126:	4498      	add	r8, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	461d      	mov	r5, r3
 800412c:	f04f 0600 	mov.w	r6, #0
 8004130:	46a9      	mov	r9, r5
 8004132:	46b2      	mov	sl, r6
 8004134:	eb19 0309 	adds.w	r3, r9, r9
 8004138:	eb4a 040a 	adc.w	r4, sl, sl
 800413c:	4699      	mov	r9, r3
 800413e:	46a2      	mov	sl, r4
 8004140:	eb19 0905 	adds.w	r9, r9, r5
 8004144:	eb4a 0a06 	adc.w	sl, sl, r6
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800415c:	4689      	mov	r9, r1
 800415e:	4692      	mov	sl, r2
 8004160:	eb19 0005 	adds.w	r0, r9, r5
 8004164:	eb4a 0106 	adc.w	r1, sl, r6
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	461d      	mov	r5, r3
 800416e:	f04f 0600 	mov.w	r6, #0
 8004172:	196b      	adds	r3, r5, r5
 8004174:	eb46 0406 	adc.w	r4, r6, r6
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	f7fc f824 	bl	80001c8 <__aeabi_uldivmod>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	461a      	mov	r2, r3
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <UART_SetConfig+0x384>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <UART_SetConfig+0x384>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4442      	add	r2, r8
 80041ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041ae:	e1b2      	b.n	8004516 <UART_SetConfig+0x6e2>
 80041b0:	40011000 	.word	0x40011000
 80041b4:	40011400 	.word	0x40011400
 80041b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4ad7      	ldr	r2, [pc, #860]	; (8004520 <UART_SetConfig+0x6ec>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d005      	beq.n	80041d2 <UART_SetConfig+0x39e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4ad6      	ldr	r2, [pc, #856]	; (8004524 <UART_SetConfig+0x6f0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	f040 80d1 	bne.w	8004374 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d2:	f7fe fdbd 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 80041d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	469a      	mov	sl, r3
 80041dc:	f04f 0b00 	mov.w	fp, #0
 80041e0:	46d0      	mov	r8, sl
 80041e2:	46d9      	mov	r9, fp
 80041e4:	eb18 0308 	adds.w	r3, r8, r8
 80041e8:	eb49 0409 	adc.w	r4, r9, r9
 80041ec:	4698      	mov	r8, r3
 80041ee:	46a1      	mov	r9, r4
 80041f0:	eb18 080a 	adds.w	r8, r8, sl
 80041f4:	eb49 090b 	adc.w	r9, r9, fp
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004204:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004208:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800420c:	4688      	mov	r8, r1
 800420e:	4691      	mov	r9, r2
 8004210:	eb1a 0508 	adds.w	r5, sl, r8
 8004214:	eb4b 0609 	adc.w	r6, fp, r9
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4619      	mov	r1, r3
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	0094      	lsls	r4, r2, #2
 800422c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004230:	008b      	lsls	r3, r1, #2
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	4628      	mov	r0, r5
 8004238:	4631      	mov	r1, r6
 800423a:	f7fb ffc5 	bl	80001c8 <__aeabi_uldivmod>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	461a      	mov	r2, r3
 8004244:	4bb8      	ldr	r3, [pc, #736]	; (8004528 <UART_SetConfig+0x6f4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	469b      	mov	fp, r3
 8004254:	f04f 0c00 	mov.w	ip, #0
 8004258:	46d9      	mov	r9, fp
 800425a:	46e2      	mov	sl, ip
 800425c:	eb19 0309 	adds.w	r3, r9, r9
 8004260:	eb4a 040a 	adc.w	r4, sl, sl
 8004264:	4699      	mov	r9, r3
 8004266:	46a2      	mov	sl, r4
 8004268:	eb19 090b 	adds.w	r9, r9, fp
 800426c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800427c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004280:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004284:	4689      	mov	r9, r1
 8004286:	4692      	mov	sl, r2
 8004288:	eb1b 0509 	adds.w	r5, fp, r9
 800428c:	eb4c 060a 	adc.w	r6, ip, sl
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4619      	mov	r1, r3
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	f04f 0400 	mov.w	r4, #0
 80042a2:	0094      	lsls	r4, r2, #2
 80042a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042a8:	008b      	lsls	r3, r1, #2
 80042aa:	461a      	mov	r2, r3
 80042ac:	4623      	mov	r3, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	4631      	mov	r1, r6
 80042b2:	f7fb ff89 	bl	80001c8 <__aeabi_uldivmod>
 80042b6:	4603      	mov	r3, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b9a      	ldr	r3, [pc, #616]	; (8004528 <UART_SetConfig+0x6f4>)
 80042be:	fba3 1302 	umull	r1, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2164      	movs	r1, #100	; 0x64
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	4a95      	ldr	r2, [pc, #596]	; (8004528 <UART_SetConfig+0x6f4>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4498      	add	r8, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	469b      	mov	fp, r3
 80042e2:	f04f 0c00 	mov.w	ip, #0
 80042e6:	46d9      	mov	r9, fp
 80042e8:	46e2      	mov	sl, ip
 80042ea:	eb19 0309 	adds.w	r3, r9, r9
 80042ee:	eb4a 040a 	adc.w	r4, sl, sl
 80042f2:	4699      	mov	r9, r3
 80042f4:	46a2      	mov	sl, r4
 80042f6:	eb19 090b 	adds.w	r9, r9, fp
 80042fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800430a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800430e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004312:	4689      	mov	r9, r1
 8004314:	4692      	mov	sl, r2
 8004316:	eb1b 0509 	adds.w	r5, fp, r9
 800431a:	eb4c 060a 	adc.w	r6, ip, sl
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4619      	mov	r1, r3
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	0094      	lsls	r4, r2, #2
 8004332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004336:	008b      	lsls	r3, r1, #2
 8004338:	461a      	mov	r2, r3
 800433a:	4623      	mov	r3, r4
 800433c:	4628      	mov	r0, r5
 800433e:	4631      	mov	r1, r6
 8004340:	f7fb ff42 	bl	80001c8 <__aeabi_uldivmod>
 8004344:	4603      	mov	r3, r0
 8004346:	460c      	mov	r4, r1
 8004348:	461a      	mov	r2, r3
 800434a:	4b77      	ldr	r3, [pc, #476]	; (8004528 <UART_SetConfig+0x6f4>)
 800434c:	fba3 1302 	umull	r1, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	2164      	movs	r1, #100	; 0x64
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	3332      	adds	r3, #50	; 0x32
 800435e:	4a72      	ldr	r2, [pc, #456]	; (8004528 <UART_SetConfig+0x6f4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4442      	add	r2, r8
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	e0d0      	b.n	8004516 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe fcd8 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8004378:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	469a      	mov	sl, r3
 800437e:	f04f 0b00 	mov.w	fp, #0
 8004382:	46d0      	mov	r8, sl
 8004384:	46d9      	mov	r9, fp
 8004386:	eb18 0308 	adds.w	r3, r8, r8
 800438a:	eb49 0409 	adc.w	r4, r9, r9
 800438e:	4698      	mov	r8, r3
 8004390:	46a1      	mov	r9, r4
 8004392:	eb18 080a 	adds.w	r8, r8, sl
 8004396:	eb49 090b 	adc.w	r9, r9, fp
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043ae:	4688      	mov	r8, r1
 80043b0:	4691      	mov	r9, r2
 80043b2:	eb1a 0508 	adds.w	r5, sl, r8
 80043b6:	eb4b 0609 	adc.w	r6, fp, r9
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4619      	mov	r1, r3
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	f04f 0400 	mov.w	r4, #0
 80043cc:	0094      	lsls	r4, r2, #2
 80043ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	4631      	mov	r1, r6
 80043dc:	f7fb fef4 	bl	80001c8 <__aeabi_uldivmod>
 80043e0:	4603      	mov	r3, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b50      	ldr	r3, [pc, #320]	; (8004528 <UART_SetConfig+0x6f4>)
 80043e8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	469b      	mov	fp, r3
 80043f6:	f04f 0c00 	mov.w	ip, #0
 80043fa:	46d9      	mov	r9, fp
 80043fc:	46e2      	mov	sl, ip
 80043fe:	eb19 0309 	adds.w	r3, r9, r9
 8004402:	eb4a 040a 	adc.w	r4, sl, sl
 8004406:	4699      	mov	r9, r3
 8004408:	46a2      	mov	sl, r4
 800440a:	eb19 090b 	adds.w	r9, r9, fp
 800440e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800441e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004426:	4689      	mov	r9, r1
 8004428:	4692      	mov	sl, r2
 800442a:	eb1b 0509 	adds.w	r5, fp, r9
 800442e:	eb4c 060a 	adc.w	r6, ip, sl
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4619      	mov	r1, r3
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	f04f 0400 	mov.w	r4, #0
 8004444:	0094      	lsls	r4, r2, #2
 8004446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	461a      	mov	r2, r3
 800444e:	4623      	mov	r3, r4
 8004450:	4628      	mov	r0, r5
 8004452:	4631      	mov	r1, r6
 8004454:	f7fb feb8 	bl	80001c8 <__aeabi_uldivmod>
 8004458:	4603      	mov	r3, r0
 800445a:	460c      	mov	r4, r1
 800445c:	461a      	mov	r2, r3
 800445e:	4b32      	ldr	r3, [pc, #200]	; (8004528 <UART_SetConfig+0x6f4>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <UART_SetConfig+0x6f4>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447e:	4498      	add	r8, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	469b      	mov	fp, r3
 8004484:	f04f 0c00 	mov.w	ip, #0
 8004488:	46d9      	mov	r9, fp
 800448a:	46e2      	mov	sl, ip
 800448c:	eb19 0309 	adds.w	r3, r9, r9
 8004490:	eb4a 040a 	adc.w	r4, sl, sl
 8004494:	4699      	mov	r9, r3
 8004496:	46a2      	mov	sl, r4
 8004498:	eb19 090b 	adds.w	r9, r9, fp
 800449c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b4:	4689      	mov	r9, r1
 80044b6:	4692      	mov	sl, r2
 80044b8:	eb1b 0509 	adds.w	r5, fp, r9
 80044bc:	eb4c 060a 	adc.w	r6, ip, sl
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	0094      	lsls	r4, r2, #2
 80044d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	461a      	mov	r2, r3
 80044dc:	4623      	mov	r3, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	4631      	mov	r1, r6
 80044e2:	f7fb fe71 	bl	80001c8 <__aeabi_uldivmod>
 80044e6:	4603      	mov	r3, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <UART_SetConfig+0x6f4>)
 80044ee:	fba3 1302 	umull	r1, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2164      	movs	r1, #100	; 0x64
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <UART_SetConfig+0x6f4>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 020f 	and.w	r2, r3, #15
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4442      	add	r2, r8
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	e7ff      	b.n	8004516 <UART_SetConfig+0x6e2>
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <__libc_init_array>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4e0d      	ldr	r6, [pc, #52]	; (8004564 <__libc_init_array+0x38>)
 8004530:	4c0d      	ldr	r4, [pc, #52]	; (8004568 <__libc_init_array+0x3c>)
 8004532:	1ba4      	subs	r4, r4, r6
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	2500      	movs	r5, #0
 8004538:	42a5      	cmp	r5, r4
 800453a:	d109      	bne.n	8004550 <__libc_init_array+0x24>
 800453c:	4e0b      	ldr	r6, [pc, #44]	; (800456c <__libc_init_array+0x40>)
 800453e:	4c0c      	ldr	r4, [pc, #48]	; (8004570 <__libc_init_array+0x44>)
 8004540:	f000 f820 	bl	8004584 <_init>
 8004544:	1ba4      	subs	r4, r4, r6
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	2500      	movs	r5, #0
 800454a:	42a5      	cmp	r5, r4
 800454c:	d105      	bne.n	800455a <__libc_init_array+0x2e>
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004554:	4798      	blx	r3
 8004556:	3501      	adds	r5, #1
 8004558:	e7ee      	b.n	8004538 <__libc_init_array+0xc>
 800455a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800455e:	4798      	blx	r3
 8004560:	3501      	adds	r5, #1
 8004562:	e7f2      	b.n	800454a <__libc_init_array+0x1e>
 8004564:	08004610 	.word	0x08004610
 8004568:	08004610 	.word	0x08004610
 800456c:	08004610 	.word	0x08004610
 8004570:	08004614 	.word	0x08004614

08004574 <memset>:
 8004574:	4402      	add	r2, r0
 8004576:	4603      	mov	r3, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <_init>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

08004590 <_fini>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr
